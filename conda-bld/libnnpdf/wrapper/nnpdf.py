# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _nnpdf
else:
    import _nnpdf

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _nnpdf.delete_SwigPyIterator

    def value(self):
        return _nnpdf.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _nnpdf.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _nnpdf.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _nnpdf.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _nnpdf.SwigPyIterator_equal(self, x)

    def copy(self):
        return _nnpdf.SwigPyIterator_copy(self)

    def next(self):
        return _nnpdf.SwigPyIterator_next(self)

    def __next__(self):
        return _nnpdf.SwigPyIterator___next__(self)

    def previous(self):
        return _nnpdf.SwigPyIterator_previous(self)

    def advance(self, n):
        return _nnpdf.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _nnpdf.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _nnpdf.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _nnpdf.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _nnpdf.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _nnpdf.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _nnpdf.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _nnpdf:
_nnpdf.SwigPyIterator_swigregister(SwigPyIterator)

REALDOUBLE = _nnpdf.REALDOUBLE

class vector_str(object):
    r"""Proxy of C++ std::vector< std::string > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_str self) -> SwigPyIterator"""
        return _nnpdf.vector_str_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_str self) -> bool"""
        return _nnpdf.vector_str___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vector_str self) -> bool"""
        return _nnpdf.vector_str___bool__(self)

    def __len__(self):
        r"""__len__(vector_str self) -> std::vector< std::string >::size_type"""
        return _nnpdf.vector_str___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(vector_str self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j) -> vector_str

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type

        """
        return _nnpdf.vector_str___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_str self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type

        __setslice__(vector_str self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j, vector_str v)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type
        v: std::vector< std::string,std::allocator< std::string > > const &

        """
        return _nnpdf.vector_str___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(vector_str self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type

        """
        return _nnpdf.vector_str___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_str self, std::vector< std::string >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type

        __delitem__(vector_str self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _nnpdf.vector_str___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_str self, PySliceObject * slice) -> vector_str

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(vector_str self, std::vector< std::string >::difference_type i) -> std::vector< std::string >::value_type const &

        Parameters
        ----------
        i: std::vector< std::string >::difference_type

        """
        return _nnpdf.vector_str___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_str self, PySliceObject * slice, vector_str v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::string,std::allocator< std::string > > const &

        __setitem__(vector_str self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(vector_str self, std::vector< std::string >::difference_type i, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        x: std::vector< std::string >::value_type const &

        """
        return _nnpdf.vector_str___setitem__(self, *args)

    def pop(self):
        r"""pop(vector_str self) -> std::vector< std::string >::value_type"""
        return _nnpdf.vector_str_pop(self)

    def append(self, x):
        r"""
        append(vector_str self, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::string >::value_type const &

        """
        return _nnpdf.vector_str_append(self, x)

    def empty(self):
        r"""empty(vector_str self) -> bool"""
        return _nnpdf.vector_str_empty(self)

    def size(self):
        r"""size(vector_str self) -> std::vector< std::string >::size_type"""
        return _nnpdf.vector_str_size(self)

    def swap(self, v):
        r"""
        swap(vector_str self, vector_str v)

        Parameters
        ----------
        v: std::vector< std::string > &

        """
        return _nnpdf.vector_str_swap(self, v)

    def begin(self):
        r"""begin(vector_str self) -> std::vector< std::string >::iterator"""
        return _nnpdf.vector_str_begin(self)

    def end(self):
        r"""end(vector_str self) -> std::vector< std::string >::iterator"""
        return _nnpdf.vector_str_end(self)

    def rbegin(self):
        r"""rbegin(vector_str self) -> std::vector< std::string >::reverse_iterator"""
        return _nnpdf.vector_str_rbegin(self)

    def rend(self):
        r"""rend(vector_str self) -> std::vector< std::string >::reverse_iterator"""
        return _nnpdf.vector_str_rend(self)

    def clear(self):
        r"""clear(vector_str self)"""
        return _nnpdf.vector_str_clear(self)

    def get_allocator(self):
        r"""get_allocator(vector_str self) -> std::vector< std::string >::allocator_type"""
        return _nnpdf.vector_str_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vector_str self)"""
        return _nnpdf.vector_str_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vector_str self, std::vector< std::string >::iterator pos) -> std::vector< std::string >::iterator

        Parameters
        ----------
        pos: std::vector< std::string >::iterator

        erase(vector_str self, std::vector< std::string >::iterator first, std::vector< std::string >::iterator last) -> std::vector< std::string >::iterator

        Parameters
        ----------
        first: std::vector< std::string >::iterator
        last: std::vector< std::string >::iterator

        """
        return _nnpdf.vector_str_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vector_str self) -> vector_str
        __init__(vector_str self, vector_str other) -> vector_str

        Parameters
        ----------
        other: std::vector< std::string > const &

        __init__(vector_str self, std::vector< std::string >::size_type size) -> vector_str

        Parameters
        ----------
        size: std::vector< std::string >::size_type

        __init__(vector_str self, std::vector< std::string >::size_type size, std::vector< std::string >::value_type const & value) -> vector_str

        Parameters
        ----------
        size: std::vector< std::string >::size_type
        value: std::vector< std::string >::value_type const &

        """
        _nnpdf.vector_str_swiginit(self, _nnpdf.new_vector_str(*args))

    def push_back(self, x):
        r"""
        push_back(vector_str self, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::string >::value_type const &

        """
        return _nnpdf.vector_str_push_back(self, x)

    def front(self):
        r"""front(vector_str self) -> std::vector< std::string >::value_type const &"""
        return _nnpdf.vector_str_front(self)

    def back(self):
        r"""back(vector_str self) -> std::vector< std::string >::value_type const &"""
        return _nnpdf.vector_str_back(self)

    def assign(self, n, x):
        r"""
        assign(vector_str self, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::string >::size_type
        x: std::vector< std::string >::value_type const &

        """
        return _nnpdf.vector_str_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vector_str self, std::vector< std::string >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::string >::size_type

        resize(vector_str self, std::vector< std::string >::size_type new_size, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::string >::size_type
        x: std::vector< std::string >::value_type const &

        """
        return _nnpdf.vector_str_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vector_str self, std::vector< std::string >::iterator pos, std::vector< std::string >::value_type const & x) -> std::vector< std::string >::iterator

        Parameters
        ----------
        pos: std::vector< std::string >::iterator
        x: std::vector< std::string >::value_type const &

        insert(vector_str self, std::vector< std::string >::iterator pos, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::string >::iterator
        n: std::vector< std::string >::size_type
        x: std::vector< std::string >::value_type const &

        """
        return _nnpdf.vector_str_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(vector_str self, std::vector< std::string >::size_type n)

        Parameters
        ----------
        n: std::vector< std::string >::size_type

        """
        return _nnpdf.vector_str_reserve(self, n)

    def capacity(self):
        r"""capacity(vector_str self) -> std::vector< std::string >::size_type"""
        return _nnpdf.vector_str_capacity(self)
    __swig_destroy__ = _nnpdf.delete_vector_str

# Register vector_str in _nnpdf:
_nnpdf.vector_str_swigregister(vector_str)

class vector_double(object):
    r"""Proxy of C++ std::vector< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_double self) -> SwigPyIterator"""
        return _nnpdf.vector_double_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_double self) -> bool"""
        return _nnpdf.vector_double___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vector_double self) -> bool"""
        return _nnpdf.vector_double___bool__(self)

    def __len__(self):
        r"""__len__(vector_double self) -> std::vector< double >::size_type"""
        return _nnpdf.vector_double___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(vector_double self, std::vector< double >::difference_type i, std::vector< double >::difference_type j) -> vector_double

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type

        """
        return _nnpdf.vector_double___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_double self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type

        __setslice__(vector_double self, std::vector< double >::difference_type i, std::vector< double >::difference_type j, vector_double v)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type
        v: std::vector< double,std::allocator< double > > const &

        """
        return _nnpdf.vector_double___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(vector_double self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type

        """
        return _nnpdf.vector_double___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_double self, std::vector< double >::difference_type i)

        Parameters
        ----------
        i: std::vector< double >::difference_type

        __delitem__(vector_double self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _nnpdf.vector_double___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_double self, PySliceObject * slice) -> vector_double

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(vector_double self, std::vector< double >::difference_type i) -> std::vector< double >::value_type const &

        Parameters
        ----------
        i: std::vector< double >::difference_type

        """
        return _nnpdf.vector_double___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_double self, PySliceObject * slice, vector_double v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< double,std::allocator< double > > const &

        __setitem__(vector_double self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(vector_double self, std::vector< double >::difference_type i, std::vector< double >::value_type const & x)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        x: std::vector< double >::value_type const &

        """
        return _nnpdf.vector_double___setitem__(self, *args)

    def pop(self):
        r"""pop(vector_double self) -> std::vector< double >::value_type"""
        return _nnpdf.vector_double_pop(self)

    def append(self, x):
        r"""
        append(vector_double self, std::vector< double >::value_type const & x)

        Parameters
        ----------
        x: std::vector< double >::value_type const &

        """
        return _nnpdf.vector_double_append(self, x)

    def empty(self):
        r"""empty(vector_double self) -> bool"""
        return _nnpdf.vector_double_empty(self)

    def size(self):
        r"""size(vector_double self) -> std::vector< double >::size_type"""
        return _nnpdf.vector_double_size(self)

    def swap(self, v):
        r"""
        swap(vector_double self, vector_double v)

        Parameters
        ----------
        v: std::vector< double > &

        """
        return _nnpdf.vector_double_swap(self, v)

    def begin(self):
        r"""begin(vector_double self) -> std::vector< double >::iterator"""
        return _nnpdf.vector_double_begin(self)

    def end(self):
        r"""end(vector_double self) -> std::vector< double >::iterator"""
        return _nnpdf.vector_double_end(self)

    def rbegin(self):
        r"""rbegin(vector_double self) -> std::vector< double >::reverse_iterator"""
        return _nnpdf.vector_double_rbegin(self)

    def rend(self):
        r"""rend(vector_double self) -> std::vector< double >::reverse_iterator"""
        return _nnpdf.vector_double_rend(self)

    def clear(self):
        r"""clear(vector_double self)"""
        return _nnpdf.vector_double_clear(self)

    def get_allocator(self):
        r"""get_allocator(vector_double self) -> std::vector< double >::allocator_type"""
        return _nnpdf.vector_double_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vector_double self)"""
        return _nnpdf.vector_double_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vector_double self, std::vector< double >::iterator pos) -> std::vector< double >::iterator

        Parameters
        ----------
        pos: std::vector< double >::iterator

        erase(vector_double self, std::vector< double >::iterator first, std::vector< double >::iterator last) -> std::vector< double >::iterator

        Parameters
        ----------
        first: std::vector< double >::iterator
        last: std::vector< double >::iterator

        """
        return _nnpdf.vector_double_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vector_double self) -> vector_double
        __init__(vector_double self, vector_double other) -> vector_double

        Parameters
        ----------
        other: std::vector< double > const &

        __init__(vector_double self, std::vector< double >::size_type size) -> vector_double

        Parameters
        ----------
        size: std::vector< double >::size_type

        __init__(vector_double self, std::vector< double >::size_type size, std::vector< double >::value_type const & value) -> vector_double

        Parameters
        ----------
        size: std::vector< double >::size_type
        value: std::vector< double >::value_type const &

        """
        _nnpdf.vector_double_swiginit(self, _nnpdf.new_vector_double(*args))

    def push_back(self, x):
        r"""
        push_back(vector_double self, std::vector< double >::value_type const & x)

        Parameters
        ----------
        x: std::vector< double >::value_type const &

        """
        return _nnpdf.vector_double_push_back(self, x)

    def front(self):
        r"""front(vector_double self) -> std::vector< double >::value_type const &"""
        return _nnpdf.vector_double_front(self)

    def back(self):
        r"""back(vector_double self) -> std::vector< double >::value_type const &"""
        return _nnpdf.vector_double_back(self)

    def assign(self, n, x):
        r"""
        assign(vector_double self, std::vector< double >::size_type n, std::vector< double >::value_type const & x)

        Parameters
        ----------
        n: std::vector< double >::size_type
        x: std::vector< double >::value_type const &

        """
        return _nnpdf.vector_double_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vector_double self, std::vector< double >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< double >::size_type

        resize(vector_double self, std::vector< double >::size_type new_size, std::vector< double >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< double >::size_type
        x: std::vector< double >::value_type const &

        """
        return _nnpdf.vector_double_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vector_double self, std::vector< double >::iterator pos, std::vector< double >::value_type const & x) -> std::vector< double >::iterator

        Parameters
        ----------
        pos: std::vector< double >::iterator
        x: std::vector< double >::value_type const &

        insert(vector_double self, std::vector< double >::iterator pos, std::vector< double >::size_type n, std::vector< double >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< double >::iterator
        n: std::vector< double >::size_type
        x: std::vector< double >::value_type const &

        """
        return _nnpdf.vector_double_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(vector_double self, std::vector< double >::size_type n)

        Parameters
        ----------
        n: std::vector< double >::size_type

        """
        return _nnpdf.vector_double_reserve(self, n)

    def capacity(self):
        r"""capacity(vector_double self) -> std::vector< double >::size_type"""
        return _nnpdf.vector_double_capacity(self)
    __swig_destroy__ = _nnpdf.delete_vector_double

# Register vector_double in _nnpdf:
_nnpdf.vector_double_swigregister(vector_double)

class vector_int(object):
    r"""Proxy of C++ std::vector< int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_int self) -> SwigPyIterator"""
        return _nnpdf.vector_int_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_int self) -> bool"""
        return _nnpdf.vector_int___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vector_int self) -> bool"""
        return _nnpdf.vector_int___bool__(self)

    def __len__(self):
        r"""__len__(vector_int self) -> std::vector< int >::size_type"""
        return _nnpdf.vector_int___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(vector_int self, std::vector< int >::difference_type i, std::vector< int >::difference_type j) -> vector_int

        Parameters
        ----------
        i: std::vector< int >::difference_type
        j: std::vector< int >::difference_type

        """
        return _nnpdf.vector_int___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_int self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)

        Parameters
        ----------
        i: std::vector< int >::difference_type
        j: std::vector< int >::difference_type

        __setslice__(vector_int self, std::vector< int >::difference_type i, std::vector< int >::difference_type j, vector_int v)

        Parameters
        ----------
        i: std::vector< int >::difference_type
        j: std::vector< int >::difference_type
        v: std::vector< int,std::allocator< int > > const &

        """
        return _nnpdf.vector_int___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(vector_int self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)

        Parameters
        ----------
        i: std::vector< int >::difference_type
        j: std::vector< int >::difference_type

        """
        return _nnpdf.vector_int___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_int self, std::vector< int >::difference_type i)

        Parameters
        ----------
        i: std::vector< int >::difference_type

        __delitem__(vector_int self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _nnpdf.vector_int___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_int self, PySliceObject * slice) -> vector_int

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(vector_int self, std::vector< int >::difference_type i) -> std::vector< int >::value_type const &

        Parameters
        ----------
        i: std::vector< int >::difference_type

        """
        return _nnpdf.vector_int___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_int self, PySliceObject * slice, vector_int v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< int,std::allocator< int > > const &

        __setitem__(vector_int self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(vector_int self, std::vector< int >::difference_type i, std::vector< int >::value_type const & x)

        Parameters
        ----------
        i: std::vector< int >::difference_type
        x: std::vector< int >::value_type const &

        """
        return _nnpdf.vector_int___setitem__(self, *args)

    def pop(self):
        r"""pop(vector_int self) -> std::vector< int >::value_type"""
        return _nnpdf.vector_int_pop(self)

    def append(self, x):
        r"""
        append(vector_int self, std::vector< int >::value_type const & x)

        Parameters
        ----------
        x: std::vector< int >::value_type const &

        """
        return _nnpdf.vector_int_append(self, x)

    def empty(self):
        r"""empty(vector_int self) -> bool"""
        return _nnpdf.vector_int_empty(self)

    def size(self):
        r"""size(vector_int self) -> std::vector< int >::size_type"""
        return _nnpdf.vector_int_size(self)

    def swap(self, v):
        r"""
        swap(vector_int self, vector_int v)

        Parameters
        ----------
        v: std::vector< int > &

        """
        return _nnpdf.vector_int_swap(self, v)

    def begin(self):
        r"""begin(vector_int self) -> std::vector< int >::iterator"""
        return _nnpdf.vector_int_begin(self)

    def end(self):
        r"""end(vector_int self) -> std::vector< int >::iterator"""
        return _nnpdf.vector_int_end(self)

    def rbegin(self):
        r"""rbegin(vector_int self) -> std::vector< int >::reverse_iterator"""
        return _nnpdf.vector_int_rbegin(self)

    def rend(self):
        r"""rend(vector_int self) -> std::vector< int >::reverse_iterator"""
        return _nnpdf.vector_int_rend(self)

    def clear(self):
        r"""clear(vector_int self)"""
        return _nnpdf.vector_int_clear(self)

    def get_allocator(self):
        r"""get_allocator(vector_int self) -> std::vector< int >::allocator_type"""
        return _nnpdf.vector_int_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vector_int self)"""
        return _nnpdf.vector_int_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vector_int self, std::vector< int >::iterator pos) -> std::vector< int >::iterator

        Parameters
        ----------
        pos: std::vector< int >::iterator

        erase(vector_int self, std::vector< int >::iterator first, std::vector< int >::iterator last) -> std::vector< int >::iterator

        Parameters
        ----------
        first: std::vector< int >::iterator
        last: std::vector< int >::iterator

        """
        return _nnpdf.vector_int_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vector_int self) -> vector_int
        __init__(vector_int self, vector_int other) -> vector_int

        Parameters
        ----------
        other: std::vector< int > const &

        __init__(vector_int self, std::vector< int >::size_type size) -> vector_int

        Parameters
        ----------
        size: std::vector< int >::size_type

        __init__(vector_int self, std::vector< int >::size_type size, std::vector< int >::value_type const & value) -> vector_int

        Parameters
        ----------
        size: std::vector< int >::size_type
        value: std::vector< int >::value_type const &

        """
        _nnpdf.vector_int_swiginit(self, _nnpdf.new_vector_int(*args))

    def push_back(self, x):
        r"""
        push_back(vector_int self, std::vector< int >::value_type const & x)

        Parameters
        ----------
        x: std::vector< int >::value_type const &

        """
        return _nnpdf.vector_int_push_back(self, x)

    def front(self):
        r"""front(vector_int self) -> std::vector< int >::value_type const &"""
        return _nnpdf.vector_int_front(self)

    def back(self):
        r"""back(vector_int self) -> std::vector< int >::value_type const &"""
        return _nnpdf.vector_int_back(self)

    def assign(self, n, x):
        r"""
        assign(vector_int self, std::vector< int >::size_type n, std::vector< int >::value_type const & x)

        Parameters
        ----------
        n: std::vector< int >::size_type
        x: std::vector< int >::value_type const &

        """
        return _nnpdf.vector_int_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vector_int self, std::vector< int >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< int >::size_type

        resize(vector_int self, std::vector< int >::size_type new_size, std::vector< int >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< int >::size_type
        x: std::vector< int >::value_type const &

        """
        return _nnpdf.vector_int_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vector_int self, std::vector< int >::iterator pos, std::vector< int >::value_type const & x) -> std::vector< int >::iterator

        Parameters
        ----------
        pos: std::vector< int >::iterator
        x: std::vector< int >::value_type const &

        insert(vector_int self, std::vector< int >::iterator pos, std::vector< int >::size_type n, std::vector< int >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< int >::iterator
        n: std::vector< int >::size_type
        x: std::vector< int >::value_type const &

        """
        return _nnpdf.vector_int_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(vector_int self, std::vector< int >::size_type n)

        Parameters
        ----------
        n: std::vector< int >::size_type

        """
        return _nnpdf.vector_int_reserve(self, n)

    def capacity(self):
        r"""capacity(vector_int self) -> std::vector< int >::size_type"""
        return _nnpdf.vector_int_capacity(self)
    __swig_destroy__ = _nnpdf.delete_vector_int

# Register vector_int in _nnpdf:
_nnpdf.vector_int_swigregister(vector_int)


def getVersion():
    r"""getVersion() -> std::string"""
    return _nnpdf.getVersion()

def SetVerbosity(arg1):
    r"""
    SetVerbosity(int arg1)

    Parameters
    ----------
    arg1: int

    """
    return _nnpdf.SetVerbosity(arg1)

def GetVerbosity():
    r"""GetVerbosity() -> int"""
    return _nnpdf.GetVerbosity()

def get_logger():
    r"""get_logger() -> std::ostream &"""
    return _nnpdf.get_logger()

def joinpath(list):
    r"""
    joinpath(std::initializer_list< std::string > const & list) -> std::string

    Parameters
    ----------
    list: std::initializer_list< std::string > const &

    """
    return _nnpdf.joinpath(list)

def write_to_file(filename, data):
    r"""
    write_to_file(std::string const & filename, std::string const & data)

    Parameters
    ----------
    filename: std::string const &
    data: std::string const &

    """
    return _nnpdf.write_to_file(filename, data)

def untargz(filename):
    r"""
    untargz(std::string const & filename) -> std::string

    Parameters
    ----------
    filename: std::string const &

    """
    return _nnpdf.untargz(filename)

def targz(filename, data):
    r"""
    targz(std::string const & filename, std::string const & data)

    Parameters
    ----------
    filename: std::string const &
    data: std::string const &

    """
    return _nnpdf.targz(filename, data)
class istream_proxy(object):
    r"""Proxy of C++ NNPDF::istream_proxy class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, filename):
        r"""
        __init__(istream_proxy self, std::string const & filename) -> istream_proxy

        Parameters
        ----------
        filename: std::string const &

        """
        _nnpdf.istream_proxy_swiginit(self, _nnpdf.new_istream_proxy(filename))

    def stream(self):
        r"""stream(istream_proxy self) -> std::istream &"""
        return _nnpdf.istream_proxy_stream(self)
    __swig_destroy__ = _nnpdf.delete_istream_proxy

# Register istream_proxy in _nnpdf:
_nnpdf.istream_proxy_swigregister(istream_proxy)
cvar = _nnpdf.cvar
convoluteAlign = cvar.convoluteAlign

class ostream_proxy(object):
    r"""Proxy of C++ NNPDF::ostream_proxy class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, filename):
        r"""
        __init__(ostream_proxy self, std::string const & filename) -> ostream_proxy

        Parameters
        ----------
        filename: std::string const &

        """
        _nnpdf.ostream_proxy_swiginit(self, _nnpdf.new_ostream_proxy(filename))

    def stream(self):
        r"""stream(ostream_proxy self) -> std::ostream &"""
        return _nnpdf.ostream_proxy_stream(self)
    __swig_destroy__ = _nnpdf.delete_ostream_proxy

# Register ostream_proxy in _nnpdf:
_nnpdf.ostream_proxy_swigregister(ostream_proxy)


def integrate(data, npoints, h):
    r"""
    integrate(double [] data, size_t npoints, double h) -> double

    Parameters
    ----------
    data: double []
    npoints: size_t
    h: double

    """
    return _nnpdf.integrate(data, npoints, h)

def split(*args):
    r"""
    split(std::string const & input) -> vector_str

    Parameters
    ----------
    input: std::string const &

    split(vector_str results, std::string const & input)

    Parameters
    ----------
    results: std::vector< std::string,std::allocator< std::string > > &
    input: std::string const &

    """
    return _nnpdf.split(*args)

def rsplit(*args):
    r"""
    rsplit(std::string const & input) -> std::vector< NNPDF::real,std::allocator< NNPDF::real > >

    Parameters
    ----------
    input: std::string const &

    rsplit(std::vector< NNPDF::real,std::allocator< NNPDF::real > > & results, std::string const & input)

    Parameters
    ----------
    results: std::vector< NNPDF::real,std::allocator< NNPDF::real > > &
    input: std::string const &

    """
    return _nnpdf.rsplit(*args)

def isplit(*args):
    r"""
    isplit(std::string const & input) -> vector_int

    Parameters
    ----------
    input: std::string const &

    isplit(vector_int results, std::string const & input)

    Parameters
    ----------
    results: std::vector< int,std::allocator< int > > &
    input: std::string const &

    """
    return _nnpdf.isplit(*args)

def ComputeAVG(*args):
    r"""
    ComputeAVG(int const & n, NNPDF::real const * x) -> NNPDF::real

    Parameters
    ----------
    n: int const &
    x: NNPDF::real const *

    ComputeAVG(std::vector< NNPDF::real,std::allocator< NNPDF::real > > const & x) -> NNPDF::real

    Parameters
    ----------
    x: std::vector< NNPDF::real,std::allocator< NNPDF::real > > const &

    """
    return _nnpdf.ComputeAVG(*args)

def ComputeStdDev(*args):
    r"""
    ComputeStdDev(int const & n, NNPDF::real const * x) -> NNPDF::real

    Parameters
    ----------
    n: int const &
    x: NNPDF::real const *

    ComputeStdDev(std::vector< NNPDF::real,std::allocator< NNPDF::real > > const & x) -> NNPDF::real

    Parameters
    ----------
    x: std::vector< NNPDF::real,std::allocator< NNPDF::real > > const &

    """
    return _nnpdf.ComputeStdDev(*args)

def ComputeEigErr(p, x):
    r"""
    ComputeEigErr(int const & p, NNPDF::real const * x) -> NNPDF::real

    Parameters
    ----------
    p: int const &
    x: NNPDF::real const *

    """
    return _nnpdf.ComputeEigErr(p, x)

def ComputeSymEigErr(p, x):
    r"""
    ComputeSymEigErr(int const & p, NNPDF::real const * x) -> NNPDF::real

    Parameters
    ----------
    p: int const &
    x: NNPDF::real const *

    """
    return _nnpdf.ComputeSymEigErr(p, x)

def ComputeMom(n, x, m):
    r"""
    ComputeMom(int const & n, NNPDF::real const * x, int const & m) -> NNPDF::real

    Parameters
    ----------
    n: int const &
    x: NNPDF::real const *
    m: int const &

    """
    return _nnpdf.ComputeMom(n, x, m)

def Compute68cl(x, up, dn):
    r"""
    Compute68cl(std::vector< NNPDF::real,std::allocator< NNPDF::real > > const & x, NNPDF::real & up, NNPDF::real & dn)

    Parameters
    ----------
    x: std::vector< NNPDF::real,std::allocator< NNPDF::real > > const &
    up: NNPDF::real &
    dn: NNPDF::real &

    """
    return _nnpdf.Compute68cl(x, up, dn)

def Compute95cl(x, up, dn):
    r"""
    Compute95cl(std::vector< NNPDF::real,std::allocator< NNPDF::real > > const & x, NNPDF::real & up, NNPDF::real & dn)

    Parameters
    ----------
    x: std::vector< NNPDF::real,std::allocator< NNPDF::real > > const &
    up: NNPDF::real &
    dn: NNPDF::real &

    """
    return _nnpdf.Compute95cl(x, up, dn)
class matrix_double(object):
    r"""Proxy of C++ NNPDF::matrix< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, row=0, col=0):
        r"""
        __init__(matrix_double self, size_t row=0, size_t col=0) -> matrix_double

        Parameters
        ----------
        row: size_t
        col: size_t

        """
        _nnpdf.matrix_double_swiginit(self, _nnpdf.new_matrix_double(row, col))

    def resize(self, row, col, v):
        r"""
        resize(matrix_double self, size_t row, size_t col, double v)

        Parameters
        ----------
        row: size_t
        col: size_t
        v: double

        """
        return _nnpdf.matrix_double_resize(self, row, col, v)

    def clear(self):
        r"""clear(matrix_double self)"""
        return _nnpdf.matrix_double_clear(self)

    def size(self, dim):
        r"""
        size(matrix_double self, size_t dim) -> size_t const &

        Parameters
        ----------
        dim: size_t

        """
        return _nnpdf.matrix_double_size(self, dim)

    def __call__(self, *args):
        r"""
        __call__(matrix_double self, size_t i, size_t j) -> double

        Parameters
        ----------
        i: size_t
        j: size_t

        __call__(matrix_double self, size_t i, size_t j) -> double const &

        Parameters
        ----------
        i: size_t
        j: size_t

        """
        return _nnpdf.matrix_double___call__(self, *args)

    def __mul__(self, _in):
        r"""
        __mul__(matrix_double self, vector_double _in) -> vector_double

        Parameters
        ----------
        in: std::vector< double,std::allocator< double > >

        """
        return _nnpdf.matrix_double___mul__(self, _in)

    def data(self, *args):
        r"""
        data(matrix_double self) -> double
        data(matrix_double self) -> double const *
        """
        return _nnpdf.matrix_double_data(self, *args)
    __swig_destroy__ = _nnpdf.delete_matrix_double

# Register matrix_double in _nnpdf:
_nnpdf.matrix_double_swigregister(matrix_double)

class RandomGenerator(object):
    r"""Proxy of C++ NNPDF::RandomGenerator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def InitRNG(method, seed):
        r"""
        InitRNG(int method, unsigned long seed)

        Parameters
        ----------
        method: int
        seed: unsigned long

        """
        return _nnpdf.RandomGenerator_InitRNG(method, seed)

    @staticmethod
    def GetRNG():
        r"""GetRNG() -> RandomGenerator"""
        return _nnpdf.RandomGenerator_GetRNG()
    Verbose = property(_nnpdf.RandomGenerator_Verbose_get, _nnpdf.RandomGenerator_Verbose_set, doc=r"""Verbose : bool""")

    def GetRandomInt(self):
        r"""GetRandomInt(RandomGenerator self) -> unsigned long"""
        return _nnpdf.RandomGenerator_GetRandomInt(self)

    def GetRandomUniform(self, *args):
        r"""
        GetRandomUniform(RandomGenerator self, unsigned long arg2) -> unsigned long

        Parameters
        ----------
        arg2: unsigned long

        GetRandomUniform(RandomGenerator self) -> double
        GetRandomUniform(RandomGenerator self, double arg2, double arg3) -> double

        Parameters
        ----------
        arg2: double
        arg3: double

        """
        return _nnpdf.RandomGenerator_GetRandomUniform(self, *args)

    def GetRandomUniformPos(self):
        r"""GetRandomUniformPos(RandomGenerator self) -> double"""
        return _nnpdf.RandomGenerator_GetRandomUniformPos(self)

    def GetRandomGausDev(self, arg2):
        r"""
        GetRandomGausDev(RandomGenerator self, double const arg2) -> double

        Parameters
        ----------
        arg2: double const

        """
        return _nnpdf.RandomGenerator_GetRandomGausDev(self, arg2)

    def SetSeed(self, arg2):
        r"""
        SetSeed(RandomGenerator self, unsigned long arg2)

        Parameters
        ----------
        arg2: unsigned long

        """
        return _nnpdf.RandomGenerator_SetSeed(self, arg2)

# Register RandomGenerator in _nnpdf:
_nnpdf.RandomGenerator_swigregister(RandomGenerator)

def RandomGenerator_InitRNG(method, seed):
    r"""
    RandomGenerator_InitRNG(int method, unsigned long seed)

    Parameters
    ----------
    method: int
    seed: unsigned long

    """
    return _nnpdf.RandomGenerator_InitRNG(method, seed)

def RandomGenerator_GetRNG():
    r"""RandomGenerator_GetRNG() -> RandomGenerator"""
    return _nnpdf.RandomGenerator_GetRNG()


def get_profile_path():
    r"""get_profile_path() -> std::string"""
    return _nnpdf.get_profile_path()

def get_data_path():
    r"""get_data_path() -> std::string"""
    return _nnpdf.get_data_path()

def get_results_path():
    r"""get_results_path() -> std::string"""
    return _nnpdf.get_results_path()

def get_config_path():
    r"""get_config_path() -> std::string"""
    return _nnpdf.get_config_path()
class LogManager(object):
    r"""Proxy of C++ NNPDF::LogManager class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def InitPath(path):
        r"""
        InitPath(std::string const & path)

        Parameters
        ----------
        path: std::string const &

        """
        return _nnpdf.LogManager_InitPath(path)

    @staticmethod
    def AddLogger(arg1, arg2):
        r"""
        AddLogger(std::string const & arg1, std::string const & arg2)

        Parameters
        ----------
        arg1: std::string const &
        arg2: std::string const &

        """
        return _nnpdf.LogManager_AddLogger(arg1, arg2)

    @staticmethod
    def GetLogger(arg1):
        r"""
        GetLogger(std::string const & arg1) -> Logger

        Parameters
        ----------
        arg1: std::string const &

        """
        return _nnpdf.LogManager_GetLogger(arg1)

    @staticmethod
    def AddLogEntry(log, ent):
        r"""
        AddLogEntry(std::string const & log, std::string ent)

        Parameters
        ----------
        log: std::string const &
        ent: std::string

        """
        return _nnpdf.LogManager_AddLogEntry(log, ent)

    @staticmethod
    def ExportLogs():
        r"""ExportLogs()"""
        return _nnpdf.LogManager_ExportLogs()

# Register LogManager in _nnpdf:
_nnpdf.LogManager_swigregister(LogManager)

def LogManager_InitPath(path):
    r"""
    LogManager_InitPath(std::string const & path)

    Parameters
    ----------
    path: std::string const &

    """
    return _nnpdf.LogManager_InitPath(path)

def LogManager_AddLogger(arg1, arg2):
    r"""
    LogManager_AddLogger(std::string const & arg1, std::string const & arg2)

    Parameters
    ----------
    arg1: std::string const &
    arg2: std::string const &

    """
    return _nnpdf.LogManager_AddLogger(arg1, arg2)

def LogManager_GetLogger(arg1):
    r"""
    LogManager_GetLogger(std::string const & arg1) -> Logger

    Parameters
    ----------
    arg1: std::string const &

    """
    return _nnpdf.LogManager_GetLogger(arg1)

def LogManager_AddLogEntry(log, ent):
    r"""
    LogManager_AddLogEntry(std::string const & log, std::string ent)

    Parameters
    ----------
    log: std::string const &
    ent: std::string

    """
    return _nnpdf.LogManager_AddLogEntry(log, ent)

def LogManager_ExportLogs():
    r"""LogManager_ExportLogs()"""
    return _nnpdf.LogManager_ExportLogs()

class Logger(object):
    r"""Proxy of C++ NNPDF::Logger class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _nnpdf.delete_Logger

# Register Logger in _nnpdf:
_nnpdf.Logger_swigregister(Logger)

class map_str_vector_str(object):
    r"""Proxy of C++ std::map< std::string,std::vector< std::string > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(map_str_vector_str self) -> SwigPyIterator"""
        return _nnpdf.map_str_vector_str_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(map_str_vector_str self) -> bool"""
        return _nnpdf.map_str_vector_str___nonzero__(self)

    def __bool__(self):
        r"""__bool__(map_str_vector_str self) -> bool"""
        return _nnpdf.map_str_vector_str___bool__(self)

    def __len__(self):
        r"""__len__(map_str_vector_str self) -> std::map< std::string,std::vector< std::string > >::size_type"""
        return _nnpdf.map_str_vector_str___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        r"""
        __getitem__(map_str_vector_str self, std::map< std::string,std::vector< std::string > >::key_type const & key) -> vector_str

        Parameters
        ----------
        key: std::map< std::string,std::vector< std::string > >::key_type const &

        """
        return _nnpdf.map_str_vector_str___getitem__(self, key)

    def __delitem__(self, key):
        r"""
        __delitem__(map_str_vector_str self, std::map< std::string,std::vector< std::string > >::key_type const & key)

        Parameters
        ----------
        key: std::map< std::string,std::vector< std::string > >::key_type const &

        """
        return _nnpdf.map_str_vector_str___delitem__(self, key)

    def has_key(self, key):
        r"""
        has_key(map_str_vector_str self, std::map< std::string,std::vector< std::string > >::key_type const & key) -> bool

        Parameters
        ----------
        key: std::map< std::string,std::vector< std::string > >::key_type const &

        """
        return _nnpdf.map_str_vector_str_has_key(self, key)

    def keys(self):
        r"""keys(map_str_vector_str self) -> PyObject *"""
        return _nnpdf.map_str_vector_str_keys(self)

    def values(self):
        r"""values(map_str_vector_str self) -> PyObject *"""
        return _nnpdf.map_str_vector_str_values(self)

    def items(self):
        r"""items(map_str_vector_str self) -> PyObject *"""
        return _nnpdf.map_str_vector_str_items(self)

    def __contains__(self, key):
        r"""
        __contains__(map_str_vector_str self, std::map< std::string,std::vector< std::string > >::key_type const & key) -> bool

        Parameters
        ----------
        key: std::map< std::string,std::vector< std::string > >::key_type const &

        """
        return _nnpdf.map_str_vector_str___contains__(self, key)

    def key_iterator(self):
        r"""key_iterator(map_str_vector_str self) -> SwigPyIterator"""
        return _nnpdf.map_str_vector_str_key_iterator(self)

    def value_iterator(self):
        r"""value_iterator(map_str_vector_str self) -> SwigPyIterator"""
        return _nnpdf.map_str_vector_str_value_iterator(self)

    def __setitem__(self, *args):
        r"""
        __setitem__(map_str_vector_str self, std::map< std::string,std::vector< std::string > >::key_type const & key)

        Parameters
        ----------
        key: std::map< std::string,std::vector< std::string > >::key_type const &

        __setitem__(map_str_vector_str self, std::map< std::string,std::vector< std::string > >::key_type const & key, vector_str x)

        Parameters
        ----------
        key: std::map< std::string,std::vector< std::string > >::key_type const &
        x: std::map< std::string,std::vector< std::string > >::mapped_type const &

        """
        return _nnpdf.map_str_vector_str___setitem__(self, *args)

    def asdict(self):
        r"""asdict(map_str_vector_str self) -> PyObject *"""
        return _nnpdf.map_str_vector_str_asdict(self)

    def __init__(self, *args):
        r"""
        __init__(map_str_vector_str self, std::less< std::string > const & other) -> map_str_vector_str

        Parameters
        ----------
        other: std::less< std::string > const &

        __init__(map_str_vector_str self) -> map_str_vector_str
        __init__(map_str_vector_str self, map_str_vector_str other) -> map_str_vector_str

        Parameters
        ----------
        other: std::map< std::string,std::vector< std::string,std::allocator< std::string > > > const &

        """
        _nnpdf.map_str_vector_str_swiginit(self, _nnpdf.new_map_str_vector_str(*args))

    def empty(self):
        r"""empty(map_str_vector_str self) -> bool"""
        return _nnpdf.map_str_vector_str_empty(self)

    def size(self):
        r"""size(map_str_vector_str self) -> std::map< std::string,std::vector< std::string > >::size_type"""
        return _nnpdf.map_str_vector_str_size(self)

    def swap(self, v):
        r"""
        swap(map_str_vector_str self, map_str_vector_str v)

        Parameters
        ----------
        v: std::map< std::string,std::vector< std::string,std::allocator< std::string > > > &

        """
        return _nnpdf.map_str_vector_str_swap(self, v)

    def begin(self):
        r"""begin(map_str_vector_str self) -> std::map< std::string,std::vector< std::string > >::iterator"""
        return _nnpdf.map_str_vector_str_begin(self)

    def end(self):
        r"""end(map_str_vector_str self) -> std::map< std::string,std::vector< std::string > >::iterator"""
        return _nnpdf.map_str_vector_str_end(self)

    def rbegin(self):
        r"""rbegin(map_str_vector_str self) -> std::map< std::string,std::vector< std::string > >::reverse_iterator"""
        return _nnpdf.map_str_vector_str_rbegin(self)

    def rend(self):
        r"""rend(map_str_vector_str self) -> std::map< std::string,std::vector< std::string > >::reverse_iterator"""
        return _nnpdf.map_str_vector_str_rend(self)

    def clear(self):
        r"""clear(map_str_vector_str self)"""
        return _nnpdf.map_str_vector_str_clear(self)

    def get_allocator(self):
        r"""get_allocator(map_str_vector_str self) -> std::map< std::string,std::vector< std::string > >::allocator_type"""
        return _nnpdf.map_str_vector_str_get_allocator(self)

    def count(self, x):
        r"""
        count(map_str_vector_str self, std::map< std::string,std::vector< std::string > >::key_type const & x) -> std::map< std::string,std::vector< std::string > >::size_type

        Parameters
        ----------
        x: std::map< std::string,std::vector< std::string > >::key_type const &

        """
        return _nnpdf.map_str_vector_str_count(self, x)

    def erase(self, *args):
        r"""
        erase(map_str_vector_str self, std::map< std::string,std::vector< std::string > >::key_type const & x) -> std::map< std::string,std::vector< std::string > >::size_type

        Parameters
        ----------
        x: std::map< std::string,std::vector< std::string > >::key_type const &

        erase(map_str_vector_str self, std::map< std::string,std::vector< std::string > >::iterator position)

        Parameters
        ----------
        position: std::map< std::string,std::vector< std::string > >::iterator

        erase(map_str_vector_str self, std::map< std::string,std::vector< std::string > >::iterator first, std::map< std::string,std::vector< std::string > >::iterator last)

        Parameters
        ----------
        first: std::map< std::string,std::vector< std::string > >::iterator
        last: std::map< std::string,std::vector< std::string > >::iterator

        """
        return _nnpdf.map_str_vector_str_erase(self, *args)

    def find(self, x):
        r"""
        find(map_str_vector_str self, std::map< std::string,std::vector< std::string > >::key_type const & x) -> std::map< std::string,std::vector< std::string > >::iterator

        Parameters
        ----------
        x: std::map< std::string,std::vector< std::string > >::key_type const &

        """
        return _nnpdf.map_str_vector_str_find(self, x)

    def lower_bound(self, x):
        r"""
        lower_bound(map_str_vector_str self, std::map< std::string,std::vector< std::string > >::key_type const & x) -> std::map< std::string,std::vector< std::string > >::iterator

        Parameters
        ----------
        x: std::map< std::string,std::vector< std::string > >::key_type const &

        """
        return _nnpdf.map_str_vector_str_lower_bound(self, x)

    def upper_bound(self, x):
        r"""
        upper_bound(map_str_vector_str self, std::map< std::string,std::vector< std::string > >::key_type const & x) -> std::map< std::string,std::vector< std::string > >::iterator

        Parameters
        ----------
        x: std::map< std::string,std::vector< std::string > >::key_type const &

        """
        return _nnpdf.map_str_vector_str_upper_bound(self, x)
    __swig_destroy__ = _nnpdf.delete_map_str_vector_str

# Register map_str_vector_str in _nnpdf:
_nnpdf.map_str_vector_str_swigregister(map_str_vector_str)

class dataInfo(object):
    r"""Proxy of C++ NNPDF::dataInfo class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nD, nS, sN, tF, sF):
        r"""
        __init__(dataInfo self, int nD, int nS, std::string sN, std::string tF, std::string sF) -> dataInfo

        Parameters
        ----------
        nD: int
        nS: int
        sN: std::string
        tF: std::string
        sF: std::string

        """
        _nnpdf.dataInfo_swiginit(self, _nnpdf.new_dataInfo(nD, nS, sN, tF, sF))
    nData = property(_nnpdf.dataInfo_nData_get, doc=r"""nData : q(const).int""")
    nSys = property(_nnpdf.dataInfo_nSys_get, doc=r"""nSys : q(const).int""")
    SetName = property(_nnpdf.dataInfo_SetName_get, doc=r"""SetName : q(const).std::string""")
    targetFile = property(_nnpdf.dataInfo_targetFile_get, doc=r"""targetFile : q(const).std::string""")
    systypeFile = property(_nnpdf.dataInfo_systypeFile_get, doc=r"""systypeFile : q(const).std::string""")
    __swig_destroy__ = _nnpdf.delete_dataInfo

# Register dataInfo in _nnpdf:
_nnpdf.dataInfo_swigregister(dataInfo)

class dataInfoRaw(object):
    r"""Proxy of C++ NNPDF::dataInfoRaw class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nD, nS, sN, pT):
        r"""
        __init__(dataInfoRaw self, int nD, int nS, std::string sN, std::string pT) -> dataInfoRaw

        Parameters
        ----------
        nD: int
        nS: int
        sN: std::string
        pT: std::string

        """
        _nnpdf.dataInfoRaw_swiginit(self, _nnpdf.new_dataInfoRaw(nD, nS, sN, pT))
    nData = property(_nnpdf.dataInfoRaw_nData_get, doc=r"""nData : q(const).int""")
    nSys = property(_nnpdf.dataInfoRaw_nSys_get, doc=r"""nSys : q(const).int""")
    SetName = property(_nnpdf.dataInfoRaw_SetName_get, doc=r"""SetName : q(const).std::string""")
    ProcType = property(_nnpdf.dataInfoRaw_ProcType_get, doc=r"""ProcType : q(const).std::string""")
    __swig_destroy__ = _nnpdf.delete_dataInfoRaw

# Register dataInfoRaw in _nnpdf:
_nnpdf.dataInfoRaw_swigregister(dataInfoRaw)

ADD = _nnpdf.ADD

MULT = _nnpdf.MULT

UNSET = _nnpdf.UNSET

class sysError(object):
    r"""Proxy of C++ NNPDF::sysError class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    add = property(_nnpdf.sysError_add_get, _nnpdf.sysError_add_set, doc=r"""add : double""")
    mult = property(_nnpdf.sysError_mult_get, _nnpdf.sysError_mult_set, doc=r"""mult : double""")
    type = property(_nnpdf.sysError_type_get, _nnpdf.sysError_type_set, doc=r"""type : NNPDF::sysType""")
    name = property(_nnpdf.sysError_name_get, _nnpdf.sysError_name_set, doc=r"""name : std::string""")
    isRAND = property(_nnpdf.sysError_isRAND_get, _nnpdf.sysError_isRAND_set, doc=r"""isRAND : bool""")

    def __init__(self, *args):
        r"""
        __init__(sysError self) -> sysError
        __init__(sysError self, sysError o) -> sysError

        Parameters
        ----------
        o: NNPDF::sysError const &

        """
        _nnpdf.sysError_swiginit(self, _nnpdf.new_sysError(*args))
    __swig_destroy__ = _nnpdf.delete_sysError

# Register sysError in _nnpdf:
_nnpdf.sysError_swigregister(sysError)


def genInfoStruct(targetfile, sysfile):
    r"""
    genInfoStruct(std::string const & targetfile, std::string const & sysfile) -> dataInfo

    Parameters
    ----------
    targetfile: std::string const &
    sysfile: std::string const &

    """
    return _nnpdf.genInfoStruct(targetfile, sysfile)

def extractSysID(sysfile):
    r"""
    extractSysID(std::string const & sysfile) -> std::string

    Parameters
    ----------
    sysfile: std::string const &

    """
    return _nnpdf.extractSysID(sysfile)
class CommonData(object):
    r"""Proxy of C++ NNPDF::CommonData class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CommonData self, CommonData set) -> CommonData

        Parameters
        ----------
        set: NNPDF::CommonData const &

        __init__(CommonData self, CommonData set, vector_int mask) -> CommonData

        Parameters
        ----------
        set: NNPDF::CommonData const &
        mask: std::vector< int,std::allocator< int > > const &

        """
        _nnpdf.CommonData_swiginit(self, _nnpdf.new_CommonData(*args))
    __swig_destroy__ = _nnpdf.delete_CommonData

    def GetSetName(self):
        r"""GetSetName(CommonData self) -> std::string const &"""
        return _nnpdf.CommonData_GetSetName(self)

    def GetNData(self):
        r"""GetNData(CommonData self) -> int const &"""
        return _nnpdf.CommonData_GetNData(self)

    def GetNSys(self):
        r"""GetNSys(CommonData self) -> int const &"""
        return _nnpdf.CommonData_GetNSys(self)

    def GetStat(self, i):
        r"""
        GetStat(CommonData self, int i) -> double const &

        Parameters
        ----------
        i: int

        """
        return _nnpdf.CommonData_GetStat(self, i)

    def GetUncE(self, i):
        r"""
        GetUncE(CommonData self, int i) -> double

        Parameters
        ----------
        i: int

        """
        return _nnpdf.CommonData_GetUncE(self, i)

    def GetCorE(self, i):
        r"""
        GetCorE(CommonData self, int i) -> double

        Parameters
        ----------
        i: int

        """
        return _nnpdf.CommonData_GetCorE(self, i)

    def GetSys(self, i, l):
        r"""
        GetSys(CommonData self, int i, int l) -> sysError

        Parameters
        ----------
        i: int
        l: int

        """
        return _nnpdf.CommonData_GetSys(self, i, l)

    def GetSysErrors(self):
        r"""GetSysErrors(CommonData self) -> NNPDF::sysError **"""
        return _nnpdf.CommonData_GetSysErrors(self)

    def GetData(self, *args):
        r"""
        GetData(CommonData self, int i) -> double const

        Parameters
        ----------
        i: int

        GetData(CommonData self) -> double *
        """
        return _nnpdf.CommonData_GetData(self, *args)

    def GetProc(self, i):
        r"""
        GetProc(CommonData self, int i) -> std::string const &

        Parameters
        ----------
        i: int

        """
        return _nnpdf.CommonData_GetProc(self, i)

    def GetKinematics(self, idat, ikin):
        r"""
        GetKinematics(CommonData self, int const & idat, int const & ikin) -> double const &

        Parameters
        ----------
        idat: int const &
        ikin: int const &

        """
        return _nnpdf.CommonData_GetKinematics(self, idat, ikin)

    @staticmethod
    def ReadFile(filename, sysfile):
        r"""
        ReadFile(std::string const & filename, std::string const & sysfile) -> CommonData

        Parameters
        ----------
        filename: std::string const &
        sysfile: std::string const &

        """
        return _nnpdf.CommonData_ReadFile(filename, sysfile)

    def Verify(self):
        r"""Verify(CommonData self)"""
        return _nnpdf.CommonData_Verify(self)

    def Export(self, targetdir):
        r"""
        Export(CommonData self, std::string const & targetdir)

        Parameters
        ----------
        targetdir: std::string const &

        """
        return _nnpdf.CommonData_Export(self, targetdir)

    def get_kintable(self):
        r"""get_kintable(CommonData self)"""
        return _nnpdf.CommonData_get_kintable(self)

    def get_cv(self):
        r"""get_cv(CommonData self)"""
        return _nnpdf.CommonData_get_cv(self)


    def __len__(self):
        return self.GetNData();



# Register CommonData in _nnpdf:
_nnpdf.CommonData_swigregister(CommonData)
CommonData.kinLabel_latex = _nnpdf.cvar.CommonData_kinLabel_latex
CommonData.kinLabel = _nnpdf.cvar.CommonData_kinLabel

def CommonData_ReadFile(filename, sysfile):
    r"""
    CommonData_ReadFile(std::string const & filename, std::string const & sysfile) -> CommonData

    Parameters
    ----------
    filename: std::string const &
    sysfile: std::string const &

    """
    return _nnpdf.CommonData_ReadFile(filename, sysfile)

class PDFSet(object):
    r"""Proxy of C++ NNPDF::PDFSet class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    erType_ER_NONE = _nnpdf.PDFSet_erType_ER_NONE
    
    erType_ER_MC = _nnpdf.PDFSet_erType_ER_MC
    
    erType_ER_MC68 = _nnpdf.PDFSet_erType_ER_MC68
    
    erType_ER_MCT0 = _nnpdf.PDFSet_erType_ER_MCT0
    
    erType_ER_EIG = _nnpdf.PDFSet_erType_ER_EIG
    
    erType_ER_EIG90 = _nnpdf.PDFSet_erType_ER_EIG90
    
    erType_ER_SYMEIG = _nnpdf.PDFSet_erType_ER_SYMEIG
    
    PHT = _nnpdf.PDFSet_PHT
    
    TBAR = _nnpdf.PDFSet_TBAR
    
    BBAR = _nnpdf.PDFSet_BBAR
    
    CBAR = _nnpdf.PDFSet_CBAR
    
    SBAR = _nnpdf.PDFSet_SBAR
    
    UBAR = _nnpdf.PDFSet_UBAR
    
    DBAR = _nnpdf.PDFSet_DBAR
    
    GLUON = _nnpdf.PDFSet_GLUON
    
    D = _nnpdf.PDFSet_D
    
    U = _nnpdf.PDFSet_U
    
    S = _nnpdf.PDFSet_S
    
    C = _nnpdf.PDFSet_C
    
    B = _nnpdf.PDFSet_B
    
    T = _nnpdf.PDFSet_T
    

    @staticmethod
    def fl_labels():
        r"""fl_labels() -> std::array< std::string,14 > const"""
        return _nnpdf.PDFSet_fl_labels()
    EVLN_GAM = _nnpdf.PDFSet_EVLN_GAM
    
    EVLN_SNG = _nnpdf.PDFSet_EVLN_SNG
    
    EVLN_GLU = _nnpdf.PDFSet_EVLN_GLU
    
    EVLN_VAL = _nnpdf.PDFSet_EVLN_VAL
    
    EVLN_V3 = _nnpdf.PDFSet_EVLN_V3
    
    EVLN_V8 = _nnpdf.PDFSet_EVLN_V8
    
    EVLN_V15 = _nnpdf.PDFSet_EVLN_V15
    
    EVLN_V24 = _nnpdf.PDFSet_EVLN_V24
    
    EVLN_V35 = _nnpdf.PDFSet_EVLN_V35
    
    EVLN_T3 = _nnpdf.PDFSet_EVLN_T3
    
    EVLN_T8 = _nnpdf.PDFSet_EVLN_T8
    
    EVLN_T15 = _nnpdf.PDFSet_EVLN_T15
    
    EVLN_T24 = _nnpdf.PDFSet_EVLN_T24
    
    EVLN_T35 = _nnpdf.PDFSet_EVLN_T35
    
    __swig_destroy__ = _nnpdf.delete_PDFSet
    Verbose = property(_nnpdf.PDFSet_Verbose_get, _nnpdf.PDFSet_Verbose_set, doc=r"""Verbose : bool""")

    def GetPDF(self, *args):
        r"""
        GetPDF(PDFSet self, NNPDF::real const & x, NNPDF::real const & Q2, int const & n, int const & fl) -> NNPDF::real

        Parameters
        ----------
        x: NNPDF::real const &
        Q2: NNPDF::real const &
        n: int const &
        fl: int const &

        GetPDF(PDFSet self, NNPDF::real const & x, NNPDF::real const & Q2, int const & n, NNPDF::real * pdf)

        Parameters
        ----------
        x: NNPDF::real const &
        Q2: NNPDF::real const &
        n: int const &
        pdf: NNPDF::real *

        """
        return _nnpdf.PDFSet_GetPDF(self, *args)

    def GetSetName(self):
        r"""GetSetName(PDFSet self) -> std::string const &"""
        return _nnpdf.PDFSet_GetSetName(self)

    def GetEtype(self):
        r"""GetEtype(PDFSet self) -> NNPDF::PDFSet::erType const &"""
        return _nnpdf.PDFSet_GetEtype(self)

    def GetMembers(self):
        r"""GetMembers(PDFSet self) -> int const &"""
        return _nnpdf.PDFSet_GetMembers(self)
    XFX = _nnpdf.PDFSet_XFX
    
    FX = _nnpdf.PDFSet_FX
    

    def IntegratePDF(self, mem, fl, Q2, xfx, gslerror, arg7, xmin=0.0, xmax=1.0):
        r"""
        IntegratePDF(PDFSet self, int const & mem, int const & fl, NNPDF::real const & Q2, NNPDF::PDFSet::intType xfx, bool & gslerror, gsl_integration_workspace * arg7, NNPDF::real xmin=0.0, NNPDF::real xmax=1.0) -> NNPDF::real

        Parameters
        ----------
        mem: int const &
        fl: int const &
        Q2: NNPDF::real const &
        xfx: enum NNPDF::PDFSet::intType
        gslerror: bool &
        arg7: gsl_integration_workspace *
        xmin: NNPDF::real
        xmax: NNPDF::real

        """
        return _nnpdf.PDFSet_IntegratePDF(self, mem, fl, Q2, xfx, gslerror, arg7, xmin, xmax)

    @staticmethod
    def errString(type):
        r"""
        errString(NNPDF::PDFSet::erType const & type) -> std::string

        Parameters
        ----------
        type: NNPDF::PDFSet::erType const &

        """
        return _nnpdf.PDFSet_errString(type)

    @staticmethod
    def LHA2EVLN(LHA, EVLN):
        r"""
        LHA2EVLN(NNPDF::real const * LHA, NNPDF::real * EVLN)

        Parameters
        ----------
        LHA: NNPDF::real const *
        EVLN: NNPDF::real *

        """
        return _nnpdf.PDFSet_LHA2EVLN(LHA, EVLN)

    @staticmethod
    def EVLN2LHA(EVL, LHA):
        r"""
        EVLN2LHA(NNPDF::real const * EVL, NNPDF::real * LHA)

        Parameters
        ----------
        EVL: NNPDF::real const *
        LHA: NNPDF::real *

        """
        return _nnpdf.PDFSet_EVLN2LHA(EVL, LHA)

# Register PDFSet in _nnpdf:
_nnpdf.PDFSet_swigregister(PDFSet)

def PDFSet_fl_labels():
    r"""PDFSet_fl_labels() -> std::array< std::string,14 > const"""
    return _nnpdf.PDFSet_fl_labels()

def PDFSet_errString(type):
    r"""
    PDFSet_errString(NNPDF::PDFSet::erType const & type) -> std::string

    Parameters
    ----------
    type: NNPDF::PDFSet::erType const &

    """
    return _nnpdf.PDFSet_errString(type)

def PDFSet_LHA2EVLN(LHA, EVLN):
    r"""
    PDFSet_LHA2EVLN(NNPDF::real const * LHA, NNPDF::real * EVLN)

    Parameters
    ----------
    LHA: NNPDF::real const *
    EVLN: NNPDF::real *

    """
    return _nnpdf.PDFSet_LHA2EVLN(LHA, EVLN)

def PDFSet_EVLN2LHA(EVL, LHA):
    r"""
    PDFSet_EVLN2LHA(NNPDF::real const * EVL, NNPDF::real * LHA)

    Parameters
    ----------
    EVL: NNPDF::real const *
    LHA: NNPDF::real *

    """
    return _nnpdf.PDFSet_EVLN2LHA(EVL, LHA)

class LHAPDFSet(PDFSet):
    r"""Proxy of C++ NNPDF::LHAPDFSet class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, arg3):
        r"""
        __init__(LHAPDFSet self, std::string const & arg2, NNPDF::PDFSet::erType arg3) -> LHAPDFSet

        Parameters
        ----------
        arg2: std::string const &
        arg3: enum NNPDF::PDFSet::erType

        """
        _nnpdf.LHAPDFSet_swiginit(self, _nnpdf.new_LHAPDFSet(arg2, arg3))
    __swig_destroy__ = _nnpdf.delete_LHAPDFSet

    def GetPDF(self, x, Q2, n, pdf):
        r"""
        GetPDF(LHAPDFSet self, NNPDF::real const & x, NNPDF::real const & Q2, int const & n, NNPDF::real * pdf)

        Parameters
        ----------
        x: NNPDF::real const &
        Q2: NNPDF::real const &
        n: int const &
        pdf: NNPDF::real *

        """
        return _nnpdf.LHAPDFSet_GetPDF(self, x, Q2, n, pdf)

    def hasFlavor(self, pdgid):
        r"""
        hasFlavor(LHAPDFSet self, int pdgid) -> bool

        Parameters
        ----------
        pdgid: int

        """
        return _nnpdf.LHAPDFSet_hasFlavor(self, pdgid)

    def xfxQ(self, x, Q, n, fl):
        r"""
        xfxQ(LHAPDFSet self, NNPDF::real const & x, NNPDF::real const & Q, int const & n, int const & fl) -> NNPDF::real

        Parameters
        ----------
        x: NNPDF::real const &
        Q: NNPDF::real const &
        n: int const &
        fl: int const &

        """
        return _nnpdf.LHAPDFSet_xfxQ(self, x, Q, n, fl)

    def grid_values(self, flmat, xmat, qmat):
        r"""
        grid_values(LHAPDFSet self, int * flmat, NNPDF::real * xmat, NNPDF::real * qmat)

        Parameters
        ----------
        flmat: int *
        xmat: NNPDF::real *
        qmat: NNPDF::real *

        """
        return _nnpdf.LHAPDFSet_grid_values(self, flmat, xmat, qmat)

# Register LHAPDFSet in _nnpdf:
_nnpdf.LHAPDFSet_swigregister(LHAPDFSet)

def single_replica(arg1, arg2):
    r"""
    single_replica(std::string const & arg1, int const & arg2) -> LHAPDFSet

    Parameters
    ----------
    arg1: std::string const &
    arg2: int const &

    """
    val = _nnpdf.new_single_replica(arg1, arg2)
    return val


def verbosity():
    r"""verbosity() -> int"""
    return _nnpdf.verbosity()

def SetLHAPDFVerbosity(v):
    r"""
    SetLHAPDFVerbosity(int v)

    Parameters
    ----------
    v: int

    """
    return _nnpdf.SetLHAPDFVerbosity(v)
class FKHeader(object):
    r"""Proxy of C++ NNPDF::FKHeader class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FKHeader self) -> FKHeader
        __init__(FKHeader self, std::istream & arg2) -> FKHeader

        Parameters
        ----------
        arg2: std::istream &

        __init__(FKHeader self, std::string const & filename) -> FKHeader

        Parameters
        ----------
        filename: std::string const &

        __init__(FKHeader self, FKHeader arg2) -> FKHeader

        Parameters
        ----------
        arg2: NNPDF::FKHeader const &

        """
        _nnpdf.FKHeader_swiginit(self, _nnpdf.new_FKHeader(*args))
    __swig_destroy__ = _nnpdf.delete_FKHeader

    def Read(self, arg2):
        r"""
        Read(FKHeader self, std::istream & arg2)

        Parameters
        ----------
        arg2: std::istream &

        """
        return _nnpdf.FKHeader_Read(self, arg2)

    def Print(self, arg2):
        r"""
        Print(FKHeader self, std::ostream & arg2)

        Parameters
        ----------
        arg2: std::ostream &

        """
        return _nnpdf.FKHeader_Print(self, arg2)

    def ResetFlavourMap(self):
        r"""ResetFlavourMap(FKHeader self)"""
        return _nnpdf.FKHeader_ResetFlavourMap(self)
    VERSIONS = _nnpdf.FKHeader_VERSIONS
    
    GRIDINFO = _nnpdf.FKHeader_GRIDINFO
    
    THEORYINFO = _nnpdf.FKHeader_THEORYINFO
    
    BLOB = _nnpdf.FKHeader_BLOB
    

    def AddTag(self, *args):
        r"""
        AddTag(FKHeader self, NNPDF::FKHeader::section sec, std::string const & key, char const * value)

        Parameters
        ----------
        sec: enum NNPDF::FKHeader::section
        key: std::string const &
        value: char const *

        AddTag(FKHeader self, NNPDF::FKHeader::section sec, std::string const & key, std::string const & value)

        Parameters
        ----------
        sec: enum NNPDF::FKHeader::section
        key: std::string const &
        value: std::string const &

        """
        return _nnpdf.FKHeader_AddTag(self, *args)

    def HasTag(self, sec, key):
        r"""
        HasTag(FKHeader self, NNPDF::FKHeader::section sec, std::string const & key) -> bool

        Parameters
        ----------
        sec: enum NNPDF::FKHeader::section
        key: std::string const &

        """
        return _nnpdf.FKHeader_HasTag(self, sec, key)

    def GetTag(self, sec, key):
        r"""
        GetTag(FKHeader self, NNPDF::FKHeader::section sec, std::string const & key) -> std::string

        Parameters
        ----------
        sec: enum NNPDF::FKHeader::section
        key: std::string const &

        """
        return _nnpdf.FKHeader_GetTag(self, sec, key)

# Register FKHeader in _nnpdf:
_nnpdf.FKHeader_swigregister(FKHeader)

class FKTable(object):
    r"""Proxy of C++ NNPDF::FKTable class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FKTable self, std::istream & arg2, vector_str cFactors=std::vector< std::string >()) -> FKTable

        Parameters
        ----------
        arg2: std::istream &
        cFactors: std::vector< std::string,std::allocator< std::string > > const &

        __init__(FKTable self, std::string const & filename, vector_str cfactors=std::vector< std::string >()) -> FKTable

        Parameters
        ----------
        filename: std::string const &
        cfactors: std::vector< std::string,std::allocator< std::string > > const &

        __init__(FKTable self, FKTable arg2) -> FKTable

        Parameters
        ----------
        arg2: NNPDF::FKTable const &

        __init__(FKTable self, FKTable arg2, vector_int arg3) -> FKTable

        Parameters
        ----------
        arg2: NNPDF::FKTable const &
        arg3: std::vector< int,std::allocator< int > > const &

        """
        _nnpdf.FKTable_swiginit(self, _nnpdf.new_FKTable(*args))
    __swig_destroy__ = _nnpdf.delete_FKTable

    def Print(self, *args):
        r"""
        Print(FKTable self, std::ostream & arg2)

        Parameters
        ----------
        arg2: std::ostream &

        Print(FKTable self, std::string const & arg2, bool const & compress=True)

        Parameters
        ----------
        arg2: std::string const &
        compress: bool const &

        """
        return _nnpdf.FKTable_Print(self, *args)

    def GetDataName(self):
        r"""GetDataName(FKTable self) -> std::string const &"""
        return _nnpdf.FKTable_GetDataName(self)

    def GetQ20(self):
        r"""GetQ20(FKTable self) -> double const &"""
        return _nnpdf.FKTable_GetQ20(self)

    def GetCFactors(self):
        r"""GetCFactors(FKTable self) -> double const *"""
        return _nnpdf.FKTable_GetCFactors(self)

    def GetCUncerts(self):
        r"""GetCUncerts(FKTable self) -> double const *"""
        return _nnpdf.FKTable_GetCUncerts(self)

    def GetNData(self):
        r"""GetNData(FKTable self) -> int const &"""
        return _nnpdf.FKTable_GetNData(self)

    def GetNx(self):
        r"""GetNx(FKTable self) -> int const &"""
        return _nnpdf.FKTable_GetNx(self)

    def GetTx(self):
        r"""GetTx(FKTable self) -> int const &"""
        return _nnpdf.FKTable_GetTx(self)

    def GetDSz(self):
        r"""GetDSz(FKTable self) -> int const &"""
        return _nnpdf.FKTable_GetDSz(self)

    def GetXGrid(self):
        r"""GetXGrid(FKTable self) -> double *"""
        return _nnpdf.FKTable_GetXGrid(self)

    def GetSigma(self):
        r"""GetSigma(FKTable self) -> NNPDF::real *"""
        return _nnpdf.FKTable_GetSigma(self)

    def GetFlmap(self):
        r"""GetFlmap(FKTable self) -> int *"""
        return _nnpdf.FKTable_GetFlmap(self)

    def GetNonZero(self):
        r"""GetNonZero(FKTable self) -> int const &"""
        return _nnpdf.FKTable_GetNonZero(self)

    def IsHadronic(self):
        r"""IsHadronic(FKTable self) -> bool const &"""
        return _nnpdf.FKTable_IsHadronic(self)

    def GetTag(self, sec, key):
        r"""
        GetTag(FKTable self, NNPDF::FKHeader::section sec, std::string const & key) -> std::string

        Parameters
        ----------
        sec: enum NNPDF::FKHeader::section
        key: std::string const &

        """
        return _nnpdf.FKTable_GetTag(self, sec, key)

    def GetISig(self, *args):
        r"""
        GetISig(FKTable self, int const & d, int const & ix1, int const & ix2, int const & ifl1, int const & ifl2) -> int

        Parameters
        ----------
        d: int const &
        ix1: int const &
        ix2: int const &
        ifl1: int const &
        ifl2: int const &

        GetISig(FKTable self, int const & d, int const & ix, int const & ifl) -> int

        Parameters
        ----------
        d: int const &
        ix: int const &
        ifl: int const &

        """
        return _nnpdf.FKTable_GetISig(self, *args)

    def get_xgrid(self):
        r"""get_xgrid(FKTable self)"""
        return _nnpdf.FKTable_get_xgrid(self)

    def get_sigma(self):
        r"""get_sigma(FKTable self)"""
        return _nnpdf.FKTable_get_sigma(self)

    def get_flmap(self):
        r"""get_flmap(FKTable self)"""
        return _nnpdf.FKTable_get_flmap(self)

# Register FKTable in _nnpdf:
_nnpdf.FKTable_swigregister(FKTable)

class vector_fktable_p(object):
    r"""Proxy of C++ std::vector< NNPDF::FKTable * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_fktable_p self) -> SwigPyIterator"""
        return _nnpdf.vector_fktable_p_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_fktable_p self) -> bool"""
        return _nnpdf.vector_fktable_p___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vector_fktable_p self) -> bool"""
        return _nnpdf.vector_fktable_p___bool__(self)

    def __len__(self):
        r"""__len__(vector_fktable_p self) -> std::vector< NNPDF::FKTable * >::size_type"""
        return _nnpdf.vector_fktable_p___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(vector_fktable_p self, std::vector< NNPDF::FKTable * >::difference_type i, std::vector< NNPDF::FKTable * >::difference_type j) -> vector_fktable_p

        Parameters
        ----------
        i: std::vector< NNPDF::FKTable * >::difference_type
        j: std::vector< NNPDF::FKTable * >::difference_type

        """
        return _nnpdf.vector_fktable_p___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_fktable_p self, std::vector< NNPDF::FKTable * >::difference_type i, std::vector< NNPDF::FKTable * >::difference_type j)

        Parameters
        ----------
        i: std::vector< NNPDF::FKTable * >::difference_type
        j: std::vector< NNPDF::FKTable * >::difference_type

        __setslice__(vector_fktable_p self, std::vector< NNPDF::FKTable * >::difference_type i, std::vector< NNPDF::FKTable * >::difference_type j, vector_fktable_p v)

        Parameters
        ----------
        i: std::vector< NNPDF::FKTable * >::difference_type
        j: std::vector< NNPDF::FKTable * >::difference_type
        v: std::vector< NNPDF::FKTable *,std::allocator< NNPDF::FKTable * > > const &

        """
        return _nnpdf.vector_fktable_p___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(vector_fktable_p self, std::vector< NNPDF::FKTable * >::difference_type i, std::vector< NNPDF::FKTable * >::difference_type j)

        Parameters
        ----------
        i: std::vector< NNPDF::FKTable * >::difference_type
        j: std::vector< NNPDF::FKTable * >::difference_type

        """
        return _nnpdf.vector_fktable_p___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_fktable_p self, std::vector< NNPDF::FKTable * >::difference_type i)

        Parameters
        ----------
        i: std::vector< NNPDF::FKTable * >::difference_type

        __delitem__(vector_fktable_p self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _nnpdf.vector_fktable_p___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_fktable_p self, PySliceObject * slice) -> vector_fktable_p

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(vector_fktable_p self, std::vector< NNPDF::FKTable * >::difference_type i) -> FKTable

        Parameters
        ----------
        i: std::vector< NNPDF::FKTable * >::difference_type

        """
        return _nnpdf.vector_fktable_p___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_fktable_p self, PySliceObject * slice, vector_fktable_p v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< NNPDF::FKTable *,std::allocator< NNPDF::FKTable * > > const &

        __setitem__(vector_fktable_p self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(vector_fktable_p self, std::vector< NNPDF::FKTable * >::difference_type i, FKTable x)

        Parameters
        ----------
        i: std::vector< NNPDF::FKTable * >::difference_type
        x: std::vector< NNPDF::FKTable * >::value_type

        """
        return _nnpdf.vector_fktable_p___setitem__(self, *args)

    def pop(self):
        r"""pop(vector_fktable_p self) -> FKTable"""
        return _nnpdf.vector_fktable_p_pop(self)

    def append(self, x):
        r"""
        append(vector_fktable_p self, FKTable x)

        Parameters
        ----------
        x: std::vector< NNPDF::FKTable * >::value_type

        """
        return _nnpdf.vector_fktable_p_append(self, x)

    def empty(self):
        r"""empty(vector_fktable_p self) -> bool"""
        return _nnpdf.vector_fktable_p_empty(self)

    def size(self):
        r"""size(vector_fktable_p self) -> std::vector< NNPDF::FKTable * >::size_type"""
        return _nnpdf.vector_fktable_p_size(self)

    def swap(self, v):
        r"""
        swap(vector_fktable_p self, vector_fktable_p v)

        Parameters
        ----------
        v: std::vector< NNPDF::FKTable * > &

        """
        return _nnpdf.vector_fktable_p_swap(self, v)

    def begin(self):
        r"""begin(vector_fktable_p self) -> std::vector< NNPDF::FKTable * >::iterator"""
        return _nnpdf.vector_fktable_p_begin(self)

    def end(self):
        r"""end(vector_fktable_p self) -> std::vector< NNPDF::FKTable * >::iterator"""
        return _nnpdf.vector_fktable_p_end(self)

    def rbegin(self):
        r"""rbegin(vector_fktable_p self) -> std::vector< NNPDF::FKTable * >::reverse_iterator"""
        return _nnpdf.vector_fktable_p_rbegin(self)

    def rend(self):
        r"""rend(vector_fktable_p self) -> std::vector< NNPDF::FKTable * >::reverse_iterator"""
        return _nnpdf.vector_fktable_p_rend(self)

    def clear(self):
        r"""clear(vector_fktable_p self)"""
        return _nnpdf.vector_fktable_p_clear(self)

    def get_allocator(self):
        r"""get_allocator(vector_fktable_p self) -> std::vector< NNPDF::FKTable * >::allocator_type"""
        return _nnpdf.vector_fktable_p_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vector_fktable_p self)"""
        return _nnpdf.vector_fktable_p_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vector_fktable_p self, std::vector< NNPDF::FKTable * >::iterator pos) -> std::vector< NNPDF::FKTable * >::iterator

        Parameters
        ----------
        pos: std::vector< NNPDF::FKTable * >::iterator

        erase(vector_fktable_p self, std::vector< NNPDF::FKTable * >::iterator first, std::vector< NNPDF::FKTable * >::iterator last) -> std::vector< NNPDF::FKTable * >::iterator

        Parameters
        ----------
        first: std::vector< NNPDF::FKTable * >::iterator
        last: std::vector< NNPDF::FKTable * >::iterator

        """
        return _nnpdf.vector_fktable_p_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vector_fktable_p self) -> vector_fktable_p
        __init__(vector_fktable_p self, vector_fktable_p other) -> vector_fktable_p

        Parameters
        ----------
        other: std::vector< NNPDF::FKTable * > const &

        __init__(vector_fktable_p self, std::vector< NNPDF::FKTable * >::size_type size) -> vector_fktable_p

        Parameters
        ----------
        size: std::vector< NNPDF::FKTable * >::size_type

        __init__(vector_fktable_p self, std::vector< NNPDF::FKTable * >::size_type size, FKTable value) -> vector_fktable_p

        Parameters
        ----------
        size: std::vector< NNPDF::FKTable * >::size_type
        value: std::vector< NNPDF::FKTable * >::value_type

        """
        _nnpdf.vector_fktable_p_swiginit(self, _nnpdf.new_vector_fktable_p(*args))

    def push_back(self, x):
        r"""
        push_back(vector_fktable_p self, FKTable x)

        Parameters
        ----------
        x: std::vector< NNPDF::FKTable * >::value_type

        """
        return _nnpdf.vector_fktable_p_push_back(self, x)

    def front(self):
        r"""front(vector_fktable_p self) -> FKTable"""
        return _nnpdf.vector_fktable_p_front(self)

    def back(self):
        r"""back(vector_fktable_p self) -> FKTable"""
        return _nnpdf.vector_fktable_p_back(self)

    def assign(self, n, x):
        r"""
        assign(vector_fktable_p self, std::vector< NNPDF::FKTable * >::size_type n, FKTable x)

        Parameters
        ----------
        n: std::vector< NNPDF::FKTable * >::size_type
        x: std::vector< NNPDF::FKTable * >::value_type

        """
        return _nnpdf.vector_fktable_p_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vector_fktable_p self, std::vector< NNPDF::FKTable * >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< NNPDF::FKTable * >::size_type

        resize(vector_fktable_p self, std::vector< NNPDF::FKTable * >::size_type new_size, FKTable x)

        Parameters
        ----------
        new_size: std::vector< NNPDF::FKTable * >::size_type
        x: std::vector< NNPDF::FKTable * >::value_type

        """
        return _nnpdf.vector_fktable_p_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vector_fktable_p self, std::vector< NNPDF::FKTable * >::iterator pos, FKTable x) -> std::vector< NNPDF::FKTable * >::iterator

        Parameters
        ----------
        pos: std::vector< NNPDF::FKTable * >::iterator
        x: std::vector< NNPDF::FKTable * >::value_type

        insert(vector_fktable_p self, std::vector< NNPDF::FKTable * >::iterator pos, std::vector< NNPDF::FKTable * >::size_type n, FKTable x)

        Parameters
        ----------
        pos: std::vector< NNPDF::FKTable * >::iterator
        n: std::vector< NNPDF::FKTable * >::size_type
        x: std::vector< NNPDF::FKTable * >::value_type

        """
        return _nnpdf.vector_fktable_p_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(vector_fktable_p self, std::vector< NNPDF::FKTable * >::size_type n)

        Parameters
        ----------
        n: std::vector< NNPDF::FKTable * >::size_type

        """
        return _nnpdf.vector_fktable_p_reserve(self, n)

    def capacity(self):
        r"""capacity(vector_fktable_p self) -> std::vector< NNPDF::FKTable * >::size_type"""
        return _nnpdf.vector_fktable_p_capacity(self)
    __swig_destroy__ = _nnpdf.delete_vector_fktable_p

# Register vector_fktable_p in _nnpdf:
_nnpdf.vector_fktable_p_swigregister(vector_fktable_p)

class FKSet(object):
    r"""Proxy of C++ NNPDF::FKSet class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _nnpdf.delete_FKSet

    def __init__(self, *args):
        r"""
        __init__(FKSet self, NNPDF::SigmaOp arg2, vector_fktable_p arg3) -> FKSet

        Parameters
        ----------
        arg2: NNPDF::SigmaOp
        arg3: std::vector< NNPDF::FKTable *,std::allocator< NNPDF::FKTable * > > const &

        __init__(FKSet self, FKSet arg2) -> FKSet

        Parameters
        ----------
        arg2: NNPDF::FKSet const &

        __init__(FKSet self, FKSet arg2, vector_int arg3) -> FKSet

        Parameters
        ----------
        arg2: NNPDF::FKSet const &
        arg3: std::vector< int,std::allocator< int > > const &

        """
        _nnpdf.FKSet_swiginit(self, _nnpdf.new_FKSet(*args))

    def GetOperator(self):
        r"""GetOperator(FKSet self) -> NNPDF::SigmaOp"""
        return _nnpdf.FKSet_GetOperator(self)

    def GetNSigma(self):
        r"""GetNSigma(FKSet self) -> int const &"""
        return _nnpdf.FKSet_GetNSigma(self)

    def GetNDataFK(self):
        r"""GetNDataFK(FKSet self) -> int const &"""
        return _nnpdf.FKSet_GetNDataFK(self)

    def IsHadronic(self):
        r"""IsHadronic(FKSet self) -> bool const &"""
        return _nnpdf.FKSet_IsHadronic(self)

    def GetDataName(self):
        r"""GetDataName(FKSet self) -> std::string const &"""
        return _nnpdf.FKSet_GetDataName(self)

    def GetFK(self, i):
        r"""
        GetFK(FKSet self, size_t const & i) -> FKTable

        Parameters
        ----------
        i: size_t const &

        """
        return _nnpdf.FKSet_GetFK(self, i)

    @staticmethod
    def parseOperator(op):
        r"""
        parseOperator(std::string const & op) -> NNPDF::SigmaOp

        Parameters
        ----------
        op: std::string const &

        """
        return _nnpdf.FKSet_parseOperator(op)

# Register FKSet in _nnpdf:
_nnpdf.FKSet_swigregister(FKSet)

def FKSet_parseOperator(op):
    r"""
    FKSet_parseOperator(std::string const & op) -> NNPDF::SigmaOp

    Parameters
    ----------
    op: std::string const &

    """
    return _nnpdf.FKSet_parseOperator(op)

class DataSet(CommonData, FKSet):
    r"""Proxy of C++ NNPDF::DataSet class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(DataSet self, CommonData arg2, FKSet arg3, double weight=1.) -> DataSet

        Parameters
        ----------
        arg2: NNPDF::CommonData const &
        arg3: NNPDF::FKSet const &
        weight: double

        __init__(DataSet self, DataSet arg2, vector_int arg3) -> DataSet

        Parameters
        ----------
        arg2: NNPDF::DataSet const &
        arg3: std::vector< int,std::allocator< int > > const &

        __init__(DataSet self, DataSet arg2) -> DataSet

        Parameters
        ----------
        arg2: NNPDF::DataSet const &

        """
        _nnpdf.DataSet_swiginit(self, _nnpdf.new_DataSet(*args))
    __swig_destroy__ = _nnpdf.delete_DataSet

    def SetT0(self, *args):
        r"""
        SetT0(DataSet self, ThPredictions arg2)

        Parameters
        ----------
        arg2: NNPDF::ThPredictions const &

        SetT0(DataSet self, PDFSet arg2)

        Parameters
        ----------
        arg2: NNPDF::PDFSet const &

        """
        return _nnpdf.DataSet_SetT0(self, *args)

    def IsT0(self):
        r"""IsT0(DataSet self) -> bool const &"""
        return _nnpdf.DataSet_IsT0(self)

    def GetT0Pred(self, i):
        r"""
        GetT0Pred(DataSet self, int i) -> double const &

        Parameters
        ----------
        i: int

        """
        return _nnpdf.DataSet_GetT0Pred(self, i)

    def GetWeight(self):
        r"""GetWeight(DataSet self) -> double"""
        return _nnpdf.DataSet_GetWeight(self)

    def GetCovMat(self):
        r"""GetCovMat(DataSet self) -> matrix_double"""
        return _nnpdf.DataSet_GetCovMat(self)

    def GetSqrtCov(self, *args):
        r"""
        GetSqrtCov(DataSet self) -> matrix_double
        GetSqrtCov(DataSet self, int i, int j) -> double

        Parameters
        ----------
        i: int
        j: int

        """
        return _nnpdf.DataSet_GetSqrtCov(self, *args)

    def IsArtificial(self):
        r"""IsArtificial(DataSet self) -> bool const &"""
        return _nnpdf.DataSet_IsArtificial(self)

    def UpdateData(self, *args):
        r"""
        UpdateData(DataSet self, double * newdat)

        Parameters
        ----------
        newdat: double *

        UpdateData(DataSet self, double * newdat, double * norm)

        Parameters
        ----------
        newdat: double *
        norm: double *

        """
        return _nnpdf.DataSet_UpdateData(self, *args)

    def SetArtificial(self, artificial):
        r"""
        SetArtificial(DataSet self, bool const & artificial)

        Parameters
        ----------
        artificial: bool const &

        """
        return _nnpdf.DataSet_SetArtificial(self, artificial)

    def RescaleErrors(self, mult):
        r"""
        RescaleErrors(DataSet self, double const mult)

        Parameters
        ----------
        mult: double const

        """
        return _nnpdf.DataSet_RescaleErrors(self, mult)

    def get_covmat(self):
        r"""
        get_covmat(DataSet self)
        Return a copy of the experiment covariance matrix.
        """
        return _nnpdf.DataSet_get_covmat(self)

    def get_sqrtcovmat(self):
        r"""get_sqrtcovmat(DataSet self)"""
        return _nnpdf.DataSet_get_sqrtcovmat(self)


    def __len__(self):
        return self.GetNData();



# Register DataSet in _nnpdf:
_nnpdf.DataSet_swigregister(DataSet)

class vector_dataset(object):
    r"""Proxy of C++ std::vector< NNPDF::DataSet > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_dataset self) -> SwigPyIterator"""
        return _nnpdf.vector_dataset_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_dataset self) -> bool"""
        return _nnpdf.vector_dataset___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vector_dataset self) -> bool"""
        return _nnpdf.vector_dataset___bool__(self)

    def __len__(self):
        r"""__len__(vector_dataset self) -> std::vector< NNPDF::DataSet >::size_type"""
        return _nnpdf.vector_dataset___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(vector_dataset self, std::vector< NNPDF::DataSet >::difference_type i, std::vector< NNPDF::DataSet >::difference_type j) -> vector_dataset

        Parameters
        ----------
        i: std::vector< NNPDF::DataSet >::difference_type
        j: std::vector< NNPDF::DataSet >::difference_type

        """
        return _nnpdf.vector_dataset___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_dataset self, std::vector< NNPDF::DataSet >::difference_type i, std::vector< NNPDF::DataSet >::difference_type j)

        Parameters
        ----------
        i: std::vector< NNPDF::DataSet >::difference_type
        j: std::vector< NNPDF::DataSet >::difference_type

        __setslice__(vector_dataset self, std::vector< NNPDF::DataSet >::difference_type i, std::vector< NNPDF::DataSet >::difference_type j, vector_dataset v)

        Parameters
        ----------
        i: std::vector< NNPDF::DataSet >::difference_type
        j: std::vector< NNPDF::DataSet >::difference_type
        v: std::vector< NNPDF::DataSet,std::allocator< NNPDF::DataSet > > const &

        """
        return _nnpdf.vector_dataset___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(vector_dataset self, std::vector< NNPDF::DataSet >::difference_type i, std::vector< NNPDF::DataSet >::difference_type j)

        Parameters
        ----------
        i: std::vector< NNPDF::DataSet >::difference_type
        j: std::vector< NNPDF::DataSet >::difference_type

        """
        return _nnpdf.vector_dataset___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_dataset self, std::vector< NNPDF::DataSet >::difference_type i)

        Parameters
        ----------
        i: std::vector< NNPDF::DataSet >::difference_type

        __delitem__(vector_dataset self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _nnpdf.vector_dataset___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_dataset self, PySliceObject * slice) -> vector_dataset

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(vector_dataset self, std::vector< NNPDF::DataSet >::difference_type i) -> DataSet

        Parameters
        ----------
        i: std::vector< NNPDF::DataSet >::difference_type

        """
        return _nnpdf.vector_dataset___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_dataset self, PySliceObject * slice, vector_dataset v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< NNPDF::DataSet,std::allocator< NNPDF::DataSet > > const &

        __setitem__(vector_dataset self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(vector_dataset self, std::vector< NNPDF::DataSet >::difference_type i, DataSet x)

        Parameters
        ----------
        i: std::vector< NNPDF::DataSet >::difference_type
        x: std::vector< NNPDF::DataSet >::value_type const &

        """
        return _nnpdf.vector_dataset___setitem__(self, *args)

    def pop(self):
        r"""pop(vector_dataset self) -> DataSet"""
        return _nnpdf.vector_dataset_pop(self)

    def append(self, x):
        r"""
        append(vector_dataset self, DataSet x)

        Parameters
        ----------
        x: std::vector< NNPDF::DataSet >::value_type const &

        """
        return _nnpdf.vector_dataset_append(self, x)

    def empty(self):
        r"""empty(vector_dataset self) -> bool"""
        return _nnpdf.vector_dataset_empty(self)

    def size(self):
        r"""size(vector_dataset self) -> std::vector< NNPDF::DataSet >::size_type"""
        return _nnpdf.vector_dataset_size(self)

    def swap(self, v):
        r"""
        swap(vector_dataset self, vector_dataset v)

        Parameters
        ----------
        v: std::vector< NNPDF::DataSet > &

        """
        return _nnpdf.vector_dataset_swap(self, v)

    def begin(self):
        r"""begin(vector_dataset self) -> std::vector< NNPDF::DataSet >::iterator"""
        return _nnpdf.vector_dataset_begin(self)

    def end(self):
        r"""end(vector_dataset self) -> std::vector< NNPDF::DataSet >::iterator"""
        return _nnpdf.vector_dataset_end(self)

    def rbegin(self):
        r"""rbegin(vector_dataset self) -> std::vector< NNPDF::DataSet >::reverse_iterator"""
        return _nnpdf.vector_dataset_rbegin(self)

    def rend(self):
        r"""rend(vector_dataset self) -> std::vector< NNPDF::DataSet >::reverse_iterator"""
        return _nnpdf.vector_dataset_rend(self)

    def clear(self):
        r"""clear(vector_dataset self)"""
        return _nnpdf.vector_dataset_clear(self)

    def get_allocator(self):
        r"""get_allocator(vector_dataset self) -> std::vector< NNPDF::DataSet >::allocator_type"""
        return _nnpdf.vector_dataset_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vector_dataset self)"""
        return _nnpdf.vector_dataset_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vector_dataset self, std::vector< NNPDF::DataSet >::iterator pos) -> std::vector< NNPDF::DataSet >::iterator

        Parameters
        ----------
        pos: std::vector< NNPDF::DataSet >::iterator

        erase(vector_dataset self, std::vector< NNPDF::DataSet >::iterator first, std::vector< NNPDF::DataSet >::iterator last) -> std::vector< NNPDF::DataSet >::iterator

        Parameters
        ----------
        first: std::vector< NNPDF::DataSet >::iterator
        last: std::vector< NNPDF::DataSet >::iterator

        """
        return _nnpdf.vector_dataset_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vector_dataset self) -> vector_dataset
        __init__(vector_dataset self, vector_dataset other) -> vector_dataset

        Parameters
        ----------
        other: std::vector< NNPDF::DataSet > const &

        __init__(vector_dataset self, std::vector< NNPDF::DataSet >::size_type size, DataSet value) -> vector_dataset

        Parameters
        ----------
        size: std::vector< NNPDF::DataSet >::size_type
        value: std::vector< NNPDF::DataSet >::value_type const &

        """
        _nnpdf.vector_dataset_swiginit(self, _nnpdf.new_vector_dataset(*args))

    def push_back(self, x):
        r"""
        push_back(vector_dataset self, DataSet x)

        Parameters
        ----------
        x: std::vector< NNPDF::DataSet >::value_type const &

        """
        return _nnpdf.vector_dataset_push_back(self, x)

    def front(self):
        r"""front(vector_dataset self) -> DataSet"""
        return _nnpdf.vector_dataset_front(self)

    def back(self):
        r"""back(vector_dataset self) -> DataSet"""
        return _nnpdf.vector_dataset_back(self)

    def assign(self, n, x):
        r"""
        assign(vector_dataset self, std::vector< NNPDF::DataSet >::size_type n, DataSet x)

        Parameters
        ----------
        n: std::vector< NNPDF::DataSet >::size_type
        x: std::vector< NNPDF::DataSet >::value_type const &

        """
        return _nnpdf.vector_dataset_assign(self, n, x)

    def insert(self, *args):
        r"""
        insert(vector_dataset self, std::vector< NNPDF::DataSet >::iterator pos, DataSet x) -> std::vector< NNPDF::DataSet >::iterator

        Parameters
        ----------
        pos: std::vector< NNPDF::DataSet >::iterator
        x: std::vector< NNPDF::DataSet >::value_type const &

        insert(vector_dataset self, std::vector< NNPDF::DataSet >::iterator pos, std::vector< NNPDF::DataSet >::size_type n, DataSet x)

        Parameters
        ----------
        pos: std::vector< NNPDF::DataSet >::iterator
        n: std::vector< NNPDF::DataSet >::size_type
        x: std::vector< NNPDF::DataSet >::value_type const &

        """
        return _nnpdf.vector_dataset_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(vector_dataset self, std::vector< NNPDF::DataSet >::size_type n)

        Parameters
        ----------
        n: std::vector< NNPDF::DataSet >::size_type

        """
        return _nnpdf.vector_dataset_reserve(self, n)

    def capacity(self):
        r"""capacity(vector_dataset self) -> std::vector< NNPDF::DataSet >::size_type"""
        return _nnpdf.vector_dataset_capacity(self)
    __swig_destroy__ = _nnpdf.delete_vector_dataset

# Register vector_dataset in _nnpdf:
_nnpdf.vector_dataset_swigregister(vector_dataset)

class vector_thpredictions(object):
    r"""Proxy of C++ std::vector< NNPDF::ThPredictions > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_thpredictions self) -> SwigPyIterator"""
        return _nnpdf.vector_thpredictions_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_thpredictions self) -> bool"""
        return _nnpdf.vector_thpredictions___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vector_thpredictions self) -> bool"""
        return _nnpdf.vector_thpredictions___bool__(self)

    def __len__(self):
        r"""__len__(vector_thpredictions self) -> std::vector< NNPDF::ThPredictions >::size_type"""
        return _nnpdf.vector_thpredictions___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(vector_thpredictions self, std::vector< NNPDF::ThPredictions >::difference_type i, std::vector< NNPDF::ThPredictions >::difference_type j) -> vector_thpredictions

        Parameters
        ----------
        i: std::vector< NNPDF::ThPredictions >::difference_type
        j: std::vector< NNPDF::ThPredictions >::difference_type

        """
        return _nnpdf.vector_thpredictions___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_thpredictions self, std::vector< NNPDF::ThPredictions >::difference_type i, std::vector< NNPDF::ThPredictions >::difference_type j)

        Parameters
        ----------
        i: std::vector< NNPDF::ThPredictions >::difference_type
        j: std::vector< NNPDF::ThPredictions >::difference_type

        __setslice__(vector_thpredictions self, std::vector< NNPDF::ThPredictions >::difference_type i, std::vector< NNPDF::ThPredictions >::difference_type j, vector_thpredictions v)

        Parameters
        ----------
        i: std::vector< NNPDF::ThPredictions >::difference_type
        j: std::vector< NNPDF::ThPredictions >::difference_type
        v: std::vector< NNPDF::ThPredictions,std::allocator< NNPDF::ThPredictions > > const &

        """
        return _nnpdf.vector_thpredictions___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(vector_thpredictions self, std::vector< NNPDF::ThPredictions >::difference_type i, std::vector< NNPDF::ThPredictions >::difference_type j)

        Parameters
        ----------
        i: std::vector< NNPDF::ThPredictions >::difference_type
        j: std::vector< NNPDF::ThPredictions >::difference_type

        """
        return _nnpdf.vector_thpredictions___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_thpredictions self, std::vector< NNPDF::ThPredictions >::difference_type i)

        Parameters
        ----------
        i: std::vector< NNPDF::ThPredictions >::difference_type

        __delitem__(vector_thpredictions self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _nnpdf.vector_thpredictions___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_thpredictions self, PySliceObject * slice) -> vector_thpredictions

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(vector_thpredictions self, std::vector< NNPDF::ThPredictions >::difference_type i) -> ThPredictions

        Parameters
        ----------
        i: std::vector< NNPDF::ThPredictions >::difference_type

        """
        return _nnpdf.vector_thpredictions___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_thpredictions self, PySliceObject * slice, vector_thpredictions v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< NNPDF::ThPredictions,std::allocator< NNPDF::ThPredictions > > const &

        __setitem__(vector_thpredictions self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(vector_thpredictions self, std::vector< NNPDF::ThPredictions >::difference_type i, ThPredictions x)

        Parameters
        ----------
        i: std::vector< NNPDF::ThPredictions >::difference_type
        x: std::vector< NNPDF::ThPredictions >::value_type const &

        """
        return _nnpdf.vector_thpredictions___setitem__(self, *args)

    def pop(self):
        r"""pop(vector_thpredictions self) -> ThPredictions"""
        return _nnpdf.vector_thpredictions_pop(self)

    def append(self, x):
        r"""
        append(vector_thpredictions self, ThPredictions x)

        Parameters
        ----------
        x: std::vector< NNPDF::ThPredictions >::value_type const &

        """
        return _nnpdf.vector_thpredictions_append(self, x)

    def empty(self):
        r"""empty(vector_thpredictions self) -> bool"""
        return _nnpdf.vector_thpredictions_empty(self)

    def size(self):
        r"""size(vector_thpredictions self) -> std::vector< NNPDF::ThPredictions >::size_type"""
        return _nnpdf.vector_thpredictions_size(self)

    def swap(self, v):
        r"""
        swap(vector_thpredictions self, vector_thpredictions v)

        Parameters
        ----------
        v: std::vector< NNPDF::ThPredictions > &

        """
        return _nnpdf.vector_thpredictions_swap(self, v)

    def begin(self):
        r"""begin(vector_thpredictions self) -> std::vector< NNPDF::ThPredictions >::iterator"""
        return _nnpdf.vector_thpredictions_begin(self)

    def end(self):
        r"""end(vector_thpredictions self) -> std::vector< NNPDF::ThPredictions >::iterator"""
        return _nnpdf.vector_thpredictions_end(self)

    def rbegin(self):
        r"""rbegin(vector_thpredictions self) -> std::vector< NNPDF::ThPredictions >::reverse_iterator"""
        return _nnpdf.vector_thpredictions_rbegin(self)

    def rend(self):
        r"""rend(vector_thpredictions self) -> std::vector< NNPDF::ThPredictions >::reverse_iterator"""
        return _nnpdf.vector_thpredictions_rend(self)

    def clear(self):
        r"""clear(vector_thpredictions self)"""
        return _nnpdf.vector_thpredictions_clear(self)

    def get_allocator(self):
        r"""get_allocator(vector_thpredictions self) -> std::vector< NNPDF::ThPredictions >::allocator_type"""
        return _nnpdf.vector_thpredictions_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vector_thpredictions self)"""
        return _nnpdf.vector_thpredictions_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vector_thpredictions self, std::vector< NNPDF::ThPredictions >::iterator pos) -> std::vector< NNPDF::ThPredictions >::iterator

        Parameters
        ----------
        pos: std::vector< NNPDF::ThPredictions >::iterator

        erase(vector_thpredictions self, std::vector< NNPDF::ThPredictions >::iterator first, std::vector< NNPDF::ThPredictions >::iterator last) -> std::vector< NNPDF::ThPredictions >::iterator

        Parameters
        ----------
        first: std::vector< NNPDF::ThPredictions >::iterator
        last: std::vector< NNPDF::ThPredictions >::iterator

        """
        return _nnpdf.vector_thpredictions_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vector_thpredictions self) -> vector_thpredictions
        __init__(vector_thpredictions self, vector_thpredictions other) -> vector_thpredictions

        Parameters
        ----------
        other: std::vector< NNPDF::ThPredictions > const &

        __init__(vector_thpredictions self, std::vector< NNPDF::ThPredictions >::size_type size, ThPredictions value) -> vector_thpredictions

        Parameters
        ----------
        size: std::vector< NNPDF::ThPredictions >::size_type
        value: std::vector< NNPDF::ThPredictions >::value_type const &

        """
        _nnpdf.vector_thpredictions_swiginit(self, _nnpdf.new_vector_thpredictions(*args))

    def push_back(self, x):
        r"""
        push_back(vector_thpredictions self, ThPredictions x)

        Parameters
        ----------
        x: std::vector< NNPDF::ThPredictions >::value_type const &

        """
        return _nnpdf.vector_thpredictions_push_back(self, x)

    def front(self):
        r"""front(vector_thpredictions self) -> ThPredictions"""
        return _nnpdf.vector_thpredictions_front(self)

    def back(self):
        r"""back(vector_thpredictions self) -> ThPredictions"""
        return _nnpdf.vector_thpredictions_back(self)

    def assign(self, n, x):
        r"""
        assign(vector_thpredictions self, std::vector< NNPDF::ThPredictions >::size_type n, ThPredictions x)

        Parameters
        ----------
        n: std::vector< NNPDF::ThPredictions >::size_type
        x: std::vector< NNPDF::ThPredictions >::value_type const &

        """
        return _nnpdf.vector_thpredictions_assign(self, n, x)

    def insert(self, *args):
        r"""
        insert(vector_thpredictions self, std::vector< NNPDF::ThPredictions >::iterator pos, ThPredictions x) -> std::vector< NNPDF::ThPredictions >::iterator

        Parameters
        ----------
        pos: std::vector< NNPDF::ThPredictions >::iterator
        x: std::vector< NNPDF::ThPredictions >::value_type const &

        insert(vector_thpredictions self, std::vector< NNPDF::ThPredictions >::iterator pos, std::vector< NNPDF::ThPredictions >::size_type n, ThPredictions x)

        Parameters
        ----------
        pos: std::vector< NNPDF::ThPredictions >::iterator
        n: std::vector< NNPDF::ThPredictions >::size_type
        x: std::vector< NNPDF::ThPredictions >::value_type const &

        """
        return _nnpdf.vector_thpredictions_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(vector_thpredictions self, std::vector< NNPDF::ThPredictions >::size_type n)

        Parameters
        ----------
        n: std::vector< NNPDF::ThPredictions >::size_type

        """
        return _nnpdf.vector_thpredictions_reserve(self, n)

    def capacity(self):
        r"""capacity(vector_thpredictions self) -> std::vector< NNPDF::ThPredictions >::size_type"""
        return _nnpdf.vector_thpredictions_capacity(self)
    __swig_destroy__ = _nnpdf.delete_vector_thpredictions

# Register vector_thpredictions in _nnpdf:
_nnpdf.vector_thpredictions_swigregister(vector_thpredictions)

class vector_experiment_pointer(object):
    r"""Proxy of C++ std::vector< NNPDF::Experiment * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_experiment_pointer self) -> SwigPyIterator"""
        return _nnpdf.vector_experiment_pointer_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_experiment_pointer self) -> bool"""
        return _nnpdf.vector_experiment_pointer___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vector_experiment_pointer self) -> bool"""
        return _nnpdf.vector_experiment_pointer___bool__(self)

    def __len__(self):
        r"""__len__(vector_experiment_pointer self) -> std::vector< NNPDF::Experiment * >::size_type"""
        return _nnpdf.vector_experiment_pointer___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(vector_experiment_pointer self, std::vector< NNPDF::Experiment * >::difference_type i, std::vector< NNPDF::Experiment * >::difference_type j) -> vector_experiment_pointer

        Parameters
        ----------
        i: std::vector< NNPDF::Experiment * >::difference_type
        j: std::vector< NNPDF::Experiment * >::difference_type

        """
        return _nnpdf.vector_experiment_pointer___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_experiment_pointer self, std::vector< NNPDF::Experiment * >::difference_type i, std::vector< NNPDF::Experiment * >::difference_type j)

        Parameters
        ----------
        i: std::vector< NNPDF::Experiment * >::difference_type
        j: std::vector< NNPDF::Experiment * >::difference_type

        __setslice__(vector_experiment_pointer self, std::vector< NNPDF::Experiment * >::difference_type i, std::vector< NNPDF::Experiment * >::difference_type j, vector_experiment_pointer v)

        Parameters
        ----------
        i: std::vector< NNPDF::Experiment * >::difference_type
        j: std::vector< NNPDF::Experiment * >::difference_type
        v: std::vector< NNPDF::Experiment *,std::allocator< NNPDF::Experiment * > > const &

        """
        return _nnpdf.vector_experiment_pointer___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(vector_experiment_pointer self, std::vector< NNPDF::Experiment * >::difference_type i, std::vector< NNPDF::Experiment * >::difference_type j)

        Parameters
        ----------
        i: std::vector< NNPDF::Experiment * >::difference_type
        j: std::vector< NNPDF::Experiment * >::difference_type

        """
        return _nnpdf.vector_experiment_pointer___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_experiment_pointer self, std::vector< NNPDF::Experiment * >::difference_type i)

        Parameters
        ----------
        i: std::vector< NNPDF::Experiment * >::difference_type

        __delitem__(vector_experiment_pointer self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _nnpdf.vector_experiment_pointer___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_experiment_pointer self, PySliceObject * slice) -> vector_experiment_pointer

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(vector_experiment_pointer self, std::vector< NNPDF::Experiment * >::difference_type i) -> Experiment

        Parameters
        ----------
        i: std::vector< NNPDF::Experiment * >::difference_type

        """
        return _nnpdf.vector_experiment_pointer___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_experiment_pointer self, PySliceObject * slice, vector_experiment_pointer v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< NNPDF::Experiment *,std::allocator< NNPDF::Experiment * > > const &

        __setitem__(vector_experiment_pointer self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(vector_experiment_pointer self, std::vector< NNPDF::Experiment * >::difference_type i, Experiment x)

        Parameters
        ----------
        i: std::vector< NNPDF::Experiment * >::difference_type
        x: std::vector< NNPDF::Experiment * >::value_type

        """
        return _nnpdf.vector_experiment_pointer___setitem__(self, *args)

    def pop(self):
        r"""pop(vector_experiment_pointer self) -> Experiment"""
        return _nnpdf.vector_experiment_pointer_pop(self)

    def append(self, x):
        r"""
        append(vector_experiment_pointer self, Experiment x)

        Parameters
        ----------
        x: std::vector< NNPDF::Experiment * >::value_type

        """
        return _nnpdf.vector_experiment_pointer_append(self, x)

    def empty(self):
        r"""empty(vector_experiment_pointer self) -> bool"""
        return _nnpdf.vector_experiment_pointer_empty(self)

    def size(self):
        r"""size(vector_experiment_pointer self) -> std::vector< NNPDF::Experiment * >::size_type"""
        return _nnpdf.vector_experiment_pointer_size(self)

    def swap(self, v):
        r"""
        swap(vector_experiment_pointer self, vector_experiment_pointer v)

        Parameters
        ----------
        v: std::vector< NNPDF::Experiment * > &

        """
        return _nnpdf.vector_experiment_pointer_swap(self, v)

    def begin(self):
        r"""begin(vector_experiment_pointer self) -> std::vector< NNPDF::Experiment * >::iterator"""
        return _nnpdf.vector_experiment_pointer_begin(self)

    def end(self):
        r"""end(vector_experiment_pointer self) -> std::vector< NNPDF::Experiment * >::iterator"""
        return _nnpdf.vector_experiment_pointer_end(self)

    def rbegin(self):
        r"""rbegin(vector_experiment_pointer self) -> std::vector< NNPDF::Experiment * >::reverse_iterator"""
        return _nnpdf.vector_experiment_pointer_rbegin(self)

    def rend(self):
        r"""rend(vector_experiment_pointer self) -> std::vector< NNPDF::Experiment * >::reverse_iterator"""
        return _nnpdf.vector_experiment_pointer_rend(self)

    def clear(self):
        r"""clear(vector_experiment_pointer self)"""
        return _nnpdf.vector_experiment_pointer_clear(self)

    def get_allocator(self):
        r"""get_allocator(vector_experiment_pointer self) -> std::vector< NNPDF::Experiment * >::allocator_type"""
        return _nnpdf.vector_experiment_pointer_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vector_experiment_pointer self)"""
        return _nnpdf.vector_experiment_pointer_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vector_experiment_pointer self, std::vector< NNPDF::Experiment * >::iterator pos) -> std::vector< NNPDF::Experiment * >::iterator

        Parameters
        ----------
        pos: std::vector< NNPDF::Experiment * >::iterator

        erase(vector_experiment_pointer self, std::vector< NNPDF::Experiment * >::iterator first, std::vector< NNPDF::Experiment * >::iterator last) -> std::vector< NNPDF::Experiment * >::iterator

        Parameters
        ----------
        first: std::vector< NNPDF::Experiment * >::iterator
        last: std::vector< NNPDF::Experiment * >::iterator

        """
        return _nnpdf.vector_experiment_pointer_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vector_experiment_pointer self) -> vector_experiment_pointer
        __init__(vector_experiment_pointer self, vector_experiment_pointer other) -> vector_experiment_pointer

        Parameters
        ----------
        other: std::vector< NNPDF::Experiment * > const &

        __init__(vector_experiment_pointer self, std::vector< NNPDF::Experiment * >::size_type size) -> vector_experiment_pointer

        Parameters
        ----------
        size: std::vector< NNPDF::Experiment * >::size_type

        __init__(vector_experiment_pointer self, std::vector< NNPDF::Experiment * >::size_type size, Experiment value) -> vector_experiment_pointer

        Parameters
        ----------
        size: std::vector< NNPDF::Experiment * >::size_type
        value: std::vector< NNPDF::Experiment * >::value_type

        """
        _nnpdf.vector_experiment_pointer_swiginit(self, _nnpdf.new_vector_experiment_pointer(*args))

    def push_back(self, x):
        r"""
        push_back(vector_experiment_pointer self, Experiment x)

        Parameters
        ----------
        x: std::vector< NNPDF::Experiment * >::value_type

        """
        return _nnpdf.vector_experiment_pointer_push_back(self, x)

    def front(self):
        r"""front(vector_experiment_pointer self) -> Experiment"""
        return _nnpdf.vector_experiment_pointer_front(self)

    def back(self):
        r"""back(vector_experiment_pointer self) -> Experiment"""
        return _nnpdf.vector_experiment_pointer_back(self)

    def assign(self, n, x):
        r"""
        assign(vector_experiment_pointer self, std::vector< NNPDF::Experiment * >::size_type n, Experiment x)

        Parameters
        ----------
        n: std::vector< NNPDF::Experiment * >::size_type
        x: std::vector< NNPDF::Experiment * >::value_type

        """
        return _nnpdf.vector_experiment_pointer_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vector_experiment_pointer self, std::vector< NNPDF::Experiment * >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< NNPDF::Experiment * >::size_type

        resize(vector_experiment_pointer self, std::vector< NNPDF::Experiment * >::size_type new_size, Experiment x)

        Parameters
        ----------
        new_size: std::vector< NNPDF::Experiment * >::size_type
        x: std::vector< NNPDF::Experiment * >::value_type

        """
        return _nnpdf.vector_experiment_pointer_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vector_experiment_pointer self, std::vector< NNPDF::Experiment * >::iterator pos, Experiment x) -> std::vector< NNPDF::Experiment * >::iterator

        Parameters
        ----------
        pos: std::vector< NNPDF::Experiment * >::iterator
        x: std::vector< NNPDF::Experiment * >::value_type

        insert(vector_experiment_pointer self, std::vector< NNPDF::Experiment * >::iterator pos, std::vector< NNPDF::Experiment * >::size_type n, Experiment x)

        Parameters
        ----------
        pos: std::vector< NNPDF::Experiment * >::iterator
        n: std::vector< NNPDF::Experiment * >::size_type
        x: std::vector< NNPDF::Experiment * >::value_type

        """
        return _nnpdf.vector_experiment_pointer_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(vector_experiment_pointer self, std::vector< NNPDF::Experiment * >::size_type n)

        Parameters
        ----------
        n: std::vector< NNPDF::Experiment * >::size_type

        """
        return _nnpdf.vector_experiment_pointer_reserve(self, n)

    def capacity(self):
        r"""capacity(vector_experiment_pointer self) -> std::vector< NNPDF::Experiment * >::size_type"""
        return _nnpdf.vector_experiment_pointer_capacity(self)
    __swig_destroy__ = _nnpdf.delete_vector_experiment_pointer

# Register vector_experiment_pointer in _nnpdf:
_nnpdf.vector_experiment_pointer_swigregister(vector_experiment_pointer)

class Experiment(object):
    r"""Proxy of C++ NNPDF::Experiment class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Experiment self, vector_dataset sets, std::string const & expname) -> Experiment

        Parameters
        ----------
        sets: std::vector< NNPDF::DataSet,std::allocator< NNPDF::DataSet > > const &
        expname: std::string const &

        __init__(Experiment self, Experiment arg2, vector_dataset sets) -> Experiment

        Parameters
        ----------
        arg2: NNPDF::Experiment const &
        sets: std::vector< NNPDF::DataSet,std::allocator< NNPDF::DataSet > > const &

        __init__(Experiment self, Experiment arg2) -> Experiment

        Parameters
        ----------
        arg2: NNPDF::Experiment const &

        """
        _nnpdf.Experiment_swiginit(self, _nnpdf.new_Experiment(*args))
    __swig_destroy__ = _nnpdf.delete_Experiment

    def MakeReplica(self):
        r"""MakeReplica(Experiment self)"""
        return _nnpdf.Experiment_MakeReplica(self)

    def MakePerPointReplica(self, pointindex):
        r"""
        MakePerPointReplica(Experiment self, int pointindex)

        Parameters
        ----------
        pointindex: int

        """
        return _nnpdf.Experiment_MakePerPointReplica(self, pointindex)

    def MakeClosure(self, *args):
        r"""
        MakeClosure(Experiment self, vector_thpredictions predictions, bool const & noise)

        Parameters
        ----------
        predictions: std::vector< NNPDF::ThPredictions,std::allocator< NNPDF::ThPredictions > > const &
        noise: bool const &

        MakeClosure(Experiment self, PDFSet pdf, bool const & noise)

        Parameters
        ----------
        pdf: NNPDF::PDFSet *
        noise: bool const &

        """
        return _nnpdf.Experiment_MakeClosure(self, *args)

    def GetNSet(self):
        r"""GetNSet(Experiment self) -> int"""
        return _nnpdf.Experiment_GetNSet(self)

    def GetSet(self, i):
        r"""
        GetSet(Experiment self, int i) -> DataSet

        Parameters
        ----------
        i: int

        """
        return _nnpdf.Experiment_GetSet(self, i)

    def DataSets(self):
        r"""DataSets(Experiment self) -> vector_dataset"""
        return _nnpdf.Experiment_DataSets(self)

    def GetExpName(self):
        r"""GetExpName(Experiment self) -> std::string const &"""
        return _nnpdf.Experiment_GetExpName(self)

    def GetSetName(self, i):
        r"""
        GetSetName(Experiment self, int i) -> std::string const &

        Parameters
        ----------
        i: int

        """
        return _nnpdf.Experiment_GetSetName(self, i)

    def GetNData(self):
        r"""GetNData(Experiment self) -> int"""
        return _nnpdf.Experiment_GetNData(self)

    def GetData(self):
        r"""GetData(Experiment self) -> double const *"""
        return _nnpdf.Experiment_GetData(self)

    def IsArtificial(self):
        r"""IsArtificial(Experiment self) -> bool"""
        return _nnpdf.Experiment_IsArtificial(self)

    def IsClosure(self):
        r"""IsClosure(Experiment self) -> bool"""
        return _nnpdf.Experiment_IsClosure(self)

    def IsT0(self):
        r"""IsT0(Experiment self) -> bool"""
        return _nnpdf.Experiment_IsT0(self)

    def GetCovMat(self):
        r"""GetCovMat(Experiment self) -> matrix_double"""
        return _nnpdf.Experiment_GetCovMat(self)

    def GetSqrtCov(self):
        r"""GetSqrtCov(Experiment self) -> matrix_double"""
        return _nnpdf.Experiment_GetSqrtCov(self)

    def ExportCovMat(self, arg2):
        r"""
        ExportCovMat(Experiment self, std::string arg2)

        Parameters
        ----------
        arg2: std::string

        """
        return _nnpdf.Experiment_ExportCovMat(self, arg2)

    def ExportSqrtCov(self, arg2):
        r"""
        ExportSqrtCov(Experiment self, std::string arg2)

        Parameters
        ----------
        arg2: std::string

        """
        return _nnpdf.Experiment_ExportSqrtCov(self, arg2)

    def SetT0(self, arg2):
        r"""
        SetT0(Experiment self, PDFSet arg2)

        Parameters
        ----------
        arg2: NNPDF::PDFSet const &

        """
        return _nnpdf.Experiment_SetT0(self, arg2)

    def LoadRepCovMat(self, *args):
        r"""
        LoadRepCovMat(Experiment self, std::string filename, bool ThUnc, vector_int bmask={})

        Parameters
        ----------
        filename: std::string
        ThUnc: bool
        bmask: std::vector< int,std::allocator< int > >

        """
        return _nnpdf.Experiment_LoadRepCovMat(self, *args)

    def LoadFitCovMat(self, *args):
        r"""
        LoadFitCovMat(Experiment self, std::string filename, bool ThUnc, vector_int bmask={})

        Parameters
        ----------
        filename: std::string
        ThUnc: bool
        bmask: std::vector< int,std::allocator< int > >

        """
        return _nnpdf.Experiment_LoadFitCovMat(self, *args)

    def GetSqrtFitCovMat(self, *args):
        r"""
        GetSqrtFitCovMat(Experiment self, std::string filename, vector_int bmask={}) -> matrix_double

        Parameters
        ----------
        filename: std::string
        bmask: std::vector< int,std::allocator< int > >

        """
        return _nnpdf.Experiment_GetSqrtFitCovMat(self, *args)

    def get_covmat(self):
        r"""
        get_covmat(Experiment self)
        Return a copy of the experiment covariance matrix.
        """
        return _nnpdf.Experiment_get_covmat(self)

    def get_sqrtcovmat(self):
        r"""get_sqrtcovmat(Experiment self)"""
        return _nnpdf.Experiment_get_sqrtcovmat(self)

    def get_cv(self):
        r"""
        get_cv(Experiment self)
        Return a copy of the central values for the experiment.
        """
        return _nnpdf.Experiment_get_cv(self)

# Register Experiment in _nnpdf:
_nnpdf.Experiment_swigregister(Experiment)


def pseudodata(exps, dataseed, replica_id):
    r"""
    pseudodata(vector_experiment_pointer exps, unsigned long dataseed, int replica_id) -> vector_experiment_pointer

    Parameters
    ----------
    exps: std::vector< NNPDF::Experiment *,std::allocator< NNPDF::Experiment * > > const &
    dataseed: unsigned long
    replica_id: int

    """
    return _nnpdf.pseudodata(exps, dataseed, replica_id)
class ThPredictions(object):
    r"""Proxy of C++ NNPDF::ThPredictions class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ThPredictions self, PDFSet arg2, Experiment arg3) -> ThPredictions

        Parameters
        ----------
        arg2: NNPDF::PDFSet const *
        arg3: NNPDF::Experiment const *

        __init__(ThPredictions self, PDFSet arg2, FKTable arg3) -> ThPredictions

        Parameters
        ----------
        arg2: NNPDF::PDFSet const *
        arg3: NNPDF::FKTable const *

        __init__(ThPredictions self, PDFSet arg2, FKSet arg3) -> ThPredictions

        Parameters
        ----------
        arg2: NNPDF::PDFSet const *
        arg3: NNPDF::FKSet const *

        __init__(ThPredictions self, PDFSet arg2, PDFSet arg3, FKTable arg4) -> ThPredictions

        Parameters
        ----------
        arg2: NNPDF::PDFSet const *
        arg3: NNPDF::PDFSet const *
        arg4: NNPDF::FKTable const *

        __init__(ThPredictions self, std::string pdfname, std::string setname, int nPDF, int nDat, NNPDF::PDFSet::erType arg6) -> ThPredictions

        Parameters
        ----------
        pdfname: std::string
        setname: std::string
        nPDF: int
        nDat: int
        arg6: enum NNPDF::PDFSet::erType

        __init__(ThPredictions self, ThPredictions arg2) -> ThPredictions

        Parameters
        ----------
        arg2: NNPDF::ThPredictions const &

        """
        _nnpdf.ThPredictions_swiginit(self, _nnpdf.new_ThPredictions(*args))
    __swig_destroy__ = _nnpdf.delete_ThPredictions

    def __iadd__(self, arg2):
        r"""
        __iadd__(ThPredictions self, ThPredictions arg2) -> ThPredictions

        Parameters
        ----------
        arg2: NNPDF::ThPredictions const &

        """
        return _nnpdf.ThPredictions___iadd__(self, arg2)

    def __isub__(self, arg2):
        r"""
        __isub__(ThPredictions self, ThPredictions arg2) -> ThPredictions

        Parameters
        ----------
        arg2: NNPDF::ThPredictions const &

        """
        return _nnpdf.ThPredictions___isub__(self, arg2)

    def __imul__(self, arg2):
        r"""
        __imul__(ThPredictions self, ThPredictions arg2) -> ThPredictions

        Parameters
        ----------
        arg2: NNPDF::ThPredictions const &

        """
        return _nnpdf.ThPredictions___imul__(self, arg2)

    def __itruediv__(self, *args):
        return _nnpdf.ThPredictions___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __add__(self, arg2):
        r"""
        __add__(ThPredictions self, ThPredictions arg2) -> ThPredictions

        Parameters
        ----------
        arg2: NNPDF::ThPredictions const &

        """
        return _nnpdf.ThPredictions___add__(self, arg2)

    def __sub__(self, arg2):
        r"""
        __sub__(ThPredictions self, ThPredictions arg2) -> ThPredictions

        Parameters
        ----------
        arg2: NNPDF::ThPredictions const &

        """
        return _nnpdf.ThPredictions___sub__(self, arg2)

    def __truediv__(self, *args):
        return _nnpdf.ThPredictions___truediv__(self, *args)
    __div__ = __truediv__



    def __mul__(self, arg2):
        r"""
        __mul__(ThPredictions self, ThPredictions arg2) -> ThPredictions

        Parameters
        ----------
        arg2: NNPDF::ThPredictions const &

        """
        return _nnpdf.ThPredictions___mul__(self, arg2)

    @staticmethod
    def Convolute(*args):
        r"""
        Convolute(PDFSet arg1, FKTable arg2, NNPDF::real * arg3)

        Parameters
        ----------
        arg1: NNPDF::PDFSet const *
        arg2: NNPDF::FKTable const *
        arg3: NNPDF::real *

        Convolute(PDFSet arg1, FKSet arg2, NNPDF::real * arg3)

        Parameters
        ----------
        arg1: NNPDF::PDFSet const *
        arg2: NNPDF::FKSet const *
        arg3: NNPDF::real *

        Convolute(PDFSet arg1, PDFSet arg2, FKTable arg3, NNPDF::real * arg4)

        Parameters
        ----------
        arg1: NNPDF::PDFSet const *
        arg2: NNPDF::PDFSet const *
        arg3: NNPDF::FKTable const *
        arg4: NNPDF::real *

        """
        return _nnpdf.ThPredictions_Convolute(*args)

    def GetObs(self, *args):
        r"""
        GetObs(ThPredictions self) -> NNPDF::real
        GetObs(ThPredictions self, int const & idat, int const & imem) -> NNPDF::real

        Parameters
        ----------
        idat: int const &
        imem: int const &

        """
        return _nnpdf.ThPredictions_GetObs(self, *args)

    def GetObsCV(self, idat):
        r"""
        GetObsCV(ThPredictions self, int const & idat) -> NNPDF::real

        Parameters
        ----------
        idat: int const &

        """
        return _nnpdf.ThPredictions_GetObsCV(self, idat)

    def GetObsError(self, idat):
        r"""
        GetObsError(ThPredictions self, int const & idat) -> NNPDF::real

        Parameters
        ----------
        idat: int const &

        """
        return _nnpdf.ThPredictions_GetObsError(self, idat)

    def GetTConv(self):
        r"""GetTConv(ThPredictions self) -> NNPDF::real"""
        return _nnpdf.ThPredictions_GetTConv(self)

    def GetNPdf(self):
        r"""GetNPdf(ThPredictions self) -> int"""
        return _nnpdf.ThPredictions_GetNPdf(self)

    def GetNData(self):
        r"""GetNData(ThPredictions self) -> int"""
        return _nnpdf.ThPredictions_GetNData(self)

    def GetSetName(self):
        r"""GetSetName(ThPredictions self) -> std::string"""
        return _nnpdf.ThPredictions_GetSetName(self)

    def GetPDFName(self):
        r"""GetPDFName(ThPredictions self) -> std::string"""
        return _nnpdf.ThPredictions_GetPDFName(self)

    def SetPDFName(self, newname):
        r"""
        SetPDFName(ThPredictions self, std::string const & newname)

        Parameters
        ----------
        newname: std::string const &

        """
        return _nnpdf.ThPredictions_SetPDFName(self, newname)

    def SetDataName(self, newname):
        r"""
        SetDataName(ThPredictions self, std::string const & newname)

        Parameters
        ----------
        newname: std::string const &

        """
        return _nnpdf.ThPredictions_SetDataName(self, newname)

    def Print(self, arg2, latex=False):
        r"""
        Print(ThPredictions self, std::ostream & arg2, bool latex=False)

        Parameters
        ----------
        arg2: std::ostream &
        latex: bool

        """
        return _nnpdf.ThPredictions_Print(self, arg2, latex)
    Verbose = property(_nnpdf.ThPredictions_Verbose_get, _nnpdf.ThPredictions_Verbose_set, doc=r"""Verbose : bool""")

    def get_data(self):
        r"""get_data(ThPredictions self)"""
        return _nnpdf.ThPredictions_get_data(self)

    def get_cv(self):
        r"""get_cv(ThPredictions self)"""
        return _nnpdf.ThPredictions_get_cv(self)

    def get_error(self):
        r"""get_error(ThPredictions self)"""
        return _nnpdf.ThPredictions_get_error(self)


    def __len__(self):
        return self.GetNData()


    def __iter__(self):
        for i in range(len(self)):
            yield self.GetObsCV(i), self.GetObsError(i)



# Register ThPredictions in _nnpdf:
_nnpdf.ThPredictions_swigregister(ThPredictions)

def ThPredictions_Convolute(*args):
    r"""
    ThPredictions_Convolute(PDFSet arg1, FKTable arg2, NNPDF::real * arg3)

    Parameters
    ----------
    arg1: NNPDF::PDFSet const *
    arg2: NNPDF::FKTable const *
    arg3: NNPDF::real *

    ThPredictions_Convolute(PDFSet arg1, FKSet arg2, NNPDF::real * arg3)

    Parameters
    ----------
    arg1: NNPDF::PDFSet const *
    arg2: NNPDF::FKSet const *
    arg3: NNPDF::real *

    ThPredictions_Convolute(PDFSet arg1, PDFSet arg2, FKTable arg3, NNPDF::real * arg4)

    Parameters
    ----------
    arg1: NNPDF::PDFSet const *
    arg2: NNPDF::PDFSet const *
    arg3: NNPDF::FKTable const *
    arg4: NNPDF::real *

    """
    return _nnpdf.ThPredictions_Convolute(*args)

class PositivitySet(CommonData, FKTable):
    r"""Proxy of C++ NNPDF::PositivitySet class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(PositivitySet self, CommonData arg2, FKTable arg3, NNPDF::real const & _lambda) -> PositivitySet

        Parameters
        ----------
        arg2: NNPDF::CommonData const &
        arg3: NNPDF::FKTable const &
        lambda: NNPDF::real const &

        __init__(PositivitySet self, PositivitySet arg2) -> PositivitySet

        Parameters
        ----------
        arg2: NNPDF::PositivitySet const &

        """
        _nnpdf.PositivitySet_swiginit(self, _nnpdf.new_PositivitySet(*args))
    __swig_destroy__ = _nnpdf.delete_PositivitySet

    def ComputeErf(self, arg2, arg3):
        r"""
        ComputeErf(PositivitySet self, PDFSet arg2, NNPDF::real * arg3)

        Parameters
        ----------
        arg2: NNPDF::PDFSet const *
        arg3: NNPDF::real *

        """
        return _nnpdf.PositivitySet_ComputeErf(self, arg2, arg3)

    def ComputeNViolated(self, arg2):
        r"""
        ComputeNViolated(PositivitySet self, PDFSet arg2)

        Parameters
        ----------
        arg2: NNPDF::PDFSet const *

        """
        return _nnpdf.PositivitySet_ComputeNViolated(self, arg2)

    def ComputeNUnacceptable(self, arg2):
        r"""
        ComputeNUnacceptable(PositivitySet self, PDFSet arg2)

        Parameters
        ----------
        arg2: NNPDF::PDFSet const *

        """
        return _nnpdf.PositivitySet_ComputeNUnacceptable(self, arg2)

    def SetBounds(self, arg2):
        r"""
        SetBounds(PositivitySet self, PDFSet arg2)

        Parameters
        ----------
        arg2: NNPDF::PDFSet const *

        """
        return _nnpdf.PositivitySet_SetBounds(self, arg2)

    def GetPredictions(self, arg2):
        r"""
        GetPredictions(PositivitySet self, PDFSet arg2)

        Parameters
        ----------
        arg2: NNPDF::PDFSet const &

        """
        return _nnpdf.PositivitySet_GetPredictions(self, arg2)

# Register PositivitySet in _nnpdf:
_nnpdf.PositivitySet_swigregister(PositivitySet)


def ComputeCovMat_basic(nDat, nSys, sqrt_weights, central_values, stat_error, systematic_errors, mult_errors, use_theory_errors, th_cov_matrix, filename, bmask):
    r"""
    ComputeCovMat_basic(int const nDat, int const nSys, vector_double sqrt_weights, vector_double central_values, vector_double stat_error, NNPDF::sysError **const systematic_errors, bool const mult_errors, bool const use_theory_errors, bool const th_cov_matrix, std::string filename, vector_int bmask) -> matrix_double

    Parameters
    ----------
    nDat: int const
    nSys: int const
    sqrt_weights: std::vector< double,std::allocator< double > > const &
    central_values: std::vector< double,std::allocator< double > > const &
    stat_error: std::vector< double,std::allocator< double > > const &
    systematic_errors: NNPDF::sysError **const
    mult_errors: bool const
    use_theory_errors: bool const
    th_cov_matrix: bool const
    filename: std::string
    bmask: std::vector< int,std::allocator< int > >

    """
    return _nnpdf.ComputeCovMat_basic(nDat, nSys, sqrt_weights, central_values, stat_error, systematic_errors, mult_errors, use_theory_errors, th_cov_matrix, filename, bmask)

def ComputeCovMat(*args):
    r"""
    ComputeCovMat(CommonData cd, vector_double t0, bool const th_cov_matrix=False, std::string filename="", vector_int bmask={}, double weight=1.) -> matrix_double

    Parameters
    ----------
    cd: NNPDF::CommonData const &
    t0: std::vector< double,std::allocator< double > > const &
    th_cov_matrix: bool const
    filename: std::string
    bmask: std::vector< int,std::allocator< int > >
    weight: double

    """
    return _nnpdf.ComputeCovMat(*args)

def ComputeSqrtMat(inmatrix):
    r"""
    ComputeSqrtMat(matrix_double inmatrix) -> matrix_double

    Parameters
    ----------
    inmatrix: NNPDF::matrix< double > const &

    """
    return _nnpdf.ComputeSqrtMat(inmatrix)

def read_theory_covmat(ndata, filename, bmask):
    r"""
    read_theory_covmat(int ndata, std::string const filename, vector_int bmask) -> matrix_double

    Parameters
    ----------
    ndata: int
    filename: std::string const
    bmask: std::vector< int,std::allocator< int > >

    """
    return _nnpdf.read_theory_covmat(ndata, filename, bmask)

def ComputeChi2_basic(nDat, nMem, data, L, theory, chi2):
    r"""
    ComputeChi2_basic(int const nDat, int const nMem, double const * data, matrix_double L, NNPDF::real *const & theory, NNPDF::real * chi2)

    Parameters
    ----------
    nDat: int const
    nMem: int const
    data: double const *
    L: NNPDF::matrix< double > const &
    theory: NNPDF::real *const &
    chi2: NNPDF::real *

    """
    return _nnpdf.ComputeChi2_basic(nDat, nMem, data, L, theory, chi2)


